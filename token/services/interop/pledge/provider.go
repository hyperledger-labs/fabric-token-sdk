/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package pledge

import (
	"time"

	token2 "github.com/hyperledger-labs/fabric-token-sdk/token"
	"github.com/hyperledger-labs/fabric-token-sdk/token/driver"
	"github.com/hyperledger-labs/fabric-token-sdk/token/token"
	"github.com/pkg/errors"
)

var (
	// TokenExistsError is returned when the token already exists
	TokenExistsError = errors.New("token exists")
	// TokenDoesNotExistError is returned when the token does not exist
	TokenDoesNotExistError = errors.New("token does not exists")
)

// ServiceProvider is used to return instances of a given type
type ServiceProvider interface {
	// GetService returns an instance of the given type
	GetService(v interface{}) (interface{}, error)
}

// StateQueryExecutor models a prover of token related states
type StateQueryExecutor struct {
	p driver.StateQueryExecutor
}

// Exist returns a proof that the passed token exists in the network this query executor targets
func (p *StateQueryExecutor) Exist(tokenID *token.ID) ([]byte, error) {
	return p.p.Exist(tokenID)
}

// DoesNotExist returns a proof that the passed token, originated in the given network, does not exist
// in the network this query executor targets
func (p *StateQueryExecutor) DoesNotExist(tokenID *token.ID, origin string, deadline time.Time) ([]byte, error) {
	return p.p.DoesNotExist(tokenID, origin, deadline)
}

// ExistsWithMetadata returns a proof that a token with metadata including the passed token ID and origin network exists
// in the network this query executor targets
func (p *StateQueryExecutor) ExistsWithMetadata(tokenID *token.ID, origin string) ([]byte, error) {
	return p.p.ExistsWithMetadata(tokenID, origin)
}

// StateVerifier is used to verify proofs related to the state of tokens in a target network
type StateVerifier struct {
	v driver.StateVerifier
}

// VerifyProofExistence verifies that a proof of existence of the passed token in the target network is valid
func (v *StateVerifier) VerifyProofExistence(proof []byte, tokenID *token.ID, metadata []byte) error {
	err := v.v.VerifyProofExistence(proof, tokenID, metadata)
	logger.Debugf("verify proof of existence for token id [%s] with [%s]", tokenID, err)
	if err != nil {
		return errors.WithMessagef(err, "failed to verify proof of existence")
	}
	return err
}

// VerifyProofNonExistence verifies that a proof of non-existence of the given token,
// originated in the given network, in the target network is valid
func (v *StateVerifier) VerifyProofNonExistence(proof []byte, tokenID *token.ID, origin string, deadline time.Time) error {
	return v.v.VerifyProofNonExistence(proof, tokenID, origin, deadline)
}

// VerifyProofTokenWithMetadataExistence verifies that a proof of existence of a token
// with metadata including the given token ID and origin network, in the target network is valid
func (v *StateVerifier) VerifyProofTokenWithMetadataExistence(proof []byte, tokenID *token.ID, origin string) error {
	return v.v.VerifyProofTokenWithMetadataExistence(proof, tokenID, origin)
}

// StateServiceProvider manages state-related services
type StateServiceProvider struct {
	p driver.StateServiceProvider
}

func NewProvider(p driver.StateServiceProvider) (*StateServiceProvider, error) {
	return &StateServiceProvider{p: p}, nil
}

// QueryExecutor returns an instance of a query executor to requests proofs from the network identified by the passed url
func (p *StateServiceProvider) QueryExecutor(url string) (*StateQueryExecutor, error) {
	prover, err := p.p.QueryExecutor(url)
	if err != nil {
		return nil, errors.WithMessagef(err, "failed getting prover for url [%s]", url)
	}
	return &StateQueryExecutor{
		p: prover,
	}, nil
}

// Verifier returns an instance of a verifier of proofs generated by the network identified by the passed url
func (p *StateServiceProvider) Verifier(url string) (*StateVerifier, error) {
	verifier, err := p.p.Verifier(url)
	if err != nil {
		return nil, errors.WithMessagef(err, "failed getting verifier for url [%s]", url)
	}
	return &StateVerifier{
		v: verifier,
	}, nil
}

func (p *StateServiceProvider) URLToTMSID(url string) (token2.TMSID, error) {
	return p.p.URLToTMSID(url)
}

// GetStateServiceProvider returns an instance of a state service provider
func GetStateServiceProvider(sp ServiceProvider) (*StateServiceProvider, error) {
	s, err := sp.GetService(&StateServiceProvider{})
	if err != nil {
		return nil, errors.Wrap(err, "failed getting state service provider")
	}
	return s.(*StateServiceProvider), nil
}
