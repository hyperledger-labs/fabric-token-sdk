// Code generated by counterfeiter. DO NOT EDIT.
package mock

import (
	"sync"

	"github.com/hyperledger-labs/fabric-token-sdk/token/services/network/fabric/tcc"
)

type PublicParametersManager struct {
	GraphHidingStub        func() bool
	graphHidingMutex       sync.RWMutex
	graphHidingArgsForCall []struct {
	}
	graphHidingReturns struct {
		result1 bool
	}
	graphHidingReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *PublicParametersManager) GraphHiding() bool {
	fake.graphHidingMutex.Lock()
	ret, specificReturn := fake.graphHidingReturnsOnCall[len(fake.graphHidingArgsForCall)]
	fake.graphHidingArgsForCall = append(fake.graphHidingArgsForCall, struct {
	}{})
	stub := fake.GraphHidingStub
	fakeReturns := fake.graphHidingReturns
	fake.recordInvocation("GraphHiding", []interface{}{})
	fake.graphHidingMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *PublicParametersManager) GraphHidingCallCount() int {
	fake.graphHidingMutex.RLock()
	defer fake.graphHidingMutex.RUnlock()
	return len(fake.graphHidingArgsForCall)
}

func (fake *PublicParametersManager) GraphHidingCalls(stub func() bool) {
	fake.graphHidingMutex.Lock()
	defer fake.graphHidingMutex.Unlock()
	fake.GraphHidingStub = stub
}

func (fake *PublicParametersManager) GraphHidingReturns(result1 bool) {
	fake.graphHidingMutex.Lock()
	defer fake.graphHidingMutex.Unlock()
	fake.GraphHidingStub = nil
	fake.graphHidingReturns = struct {
		result1 bool
	}{result1}
}

func (fake *PublicParametersManager) GraphHidingReturnsOnCall(i int, result1 bool) {
	fake.graphHidingMutex.Lock()
	defer fake.graphHidingMutex.Unlock()
	fake.GraphHidingStub = nil
	if fake.graphHidingReturnsOnCall == nil {
		fake.graphHidingReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.graphHidingReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *PublicParametersManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.graphHidingMutex.RLock()
	defer fake.graphHidingMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *PublicParametersManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ tcc.PublicParameters = new(PublicParametersManager)
