// Code generated by counterfeiter. DO NOT EDIT.
package mock

import (
	"context"
	"sync"

	"github.com/hyperledger-labs/fabric-token-sdk/token/driver"
)

type Validator struct {
	UnmarshalActionsStub        func([]byte) ([]interface{}, error)
	unmarshalActionsMutex       sync.RWMutex
	unmarshalActionsArgsForCall []struct {
		arg1 []byte
	}
	unmarshalActionsReturns struct {
		result1 []interface{}
		result2 error
	}
	unmarshalActionsReturnsOnCall map[int]struct {
		result1 []interface{}
		result2 error
	}
	VerifyTokenRequestFromRawStub        func(context.Context, func(key string) ([]byte, error), string, []byte) ([]interface{}, map[string][]byte, error)
	verifyTokenRequestFromRawMutex       sync.RWMutex
	verifyTokenRequestFromRawArgsForCall []struct {
		arg1 context.Context
		arg2 func(key string) ([]byte, error)
		arg3 string
		arg4 []byte
	}
	verifyTokenRequestFromRawReturns struct {
		result1 []interface{}
		result2 map[string][]byte
		result3 error
	}
	verifyTokenRequestFromRawReturnsOnCall map[int]struct {
		result1 []interface{}
		result2 map[string][]byte
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Validator) UnmarshalActions(arg1 []byte) ([]interface{}, error) {
	var arg1Copy []byte
	if arg1 != nil {
		arg1Copy = make([]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.unmarshalActionsMutex.Lock()
	ret, specificReturn := fake.unmarshalActionsReturnsOnCall[len(fake.unmarshalActionsArgsForCall)]
	fake.unmarshalActionsArgsForCall = append(fake.unmarshalActionsArgsForCall, struct {
		arg1 []byte
	}{arg1Copy})
	stub := fake.UnmarshalActionsStub
	fakeReturns := fake.unmarshalActionsReturns
	fake.recordInvocation("UnmarshalActions", []interface{}{arg1Copy})
	fake.unmarshalActionsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Validator) UnmarshalActionsCallCount() int {
	fake.unmarshalActionsMutex.RLock()
	defer fake.unmarshalActionsMutex.RUnlock()
	return len(fake.unmarshalActionsArgsForCall)
}

func (fake *Validator) UnmarshalActionsCalls(stub func([]byte) ([]interface{}, error)) {
	fake.unmarshalActionsMutex.Lock()
	defer fake.unmarshalActionsMutex.Unlock()
	fake.UnmarshalActionsStub = stub
}

func (fake *Validator) UnmarshalActionsArgsForCall(i int) []byte {
	fake.unmarshalActionsMutex.RLock()
	defer fake.unmarshalActionsMutex.RUnlock()
	argsForCall := fake.unmarshalActionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Validator) UnmarshalActionsReturns(result1 []interface{}, result2 error) {
	fake.unmarshalActionsMutex.Lock()
	defer fake.unmarshalActionsMutex.Unlock()
	fake.UnmarshalActionsStub = nil
	fake.unmarshalActionsReturns = struct {
		result1 []interface{}
		result2 error
	}{result1, result2}
}

func (fake *Validator) UnmarshalActionsReturnsOnCall(i int, result1 []interface{}, result2 error) {
	fake.unmarshalActionsMutex.Lock()
	defer fake.unmarshalActionsMutex.Unlock()
	fake.UnmarshalActionsStub = nil
	if fake.unmarshalActionsReturnsOnCall == nil {
		fake.unmarshalActionsReturnsOnCall = make(map[int]struct {
			result1 []interface{}
			result2 error
		})
	}
	fake.unmarshalActionsReturnsOnCall[i] = struct {
		result1 []interface{}
		result2 error
	}{result1, result2}
}

func (fake *Validator) VerifyTokenRequestFromRaw(arg1 context.Context, arg2 func(key string) ([]byte, error), arg3 string, arg4 []byte) ([]interface{}, map[string][]byte, error) {
	var arg4Copy []byte
	if arg4 != nil {
		arg4Copy = make([]byte, len(arg4))
		copy(arg4Copy, arg4)
	}
	fake.verifyTokenRequestFromRawMutex.Lock()
	ret, specificReturn := fake.verifyTokenRequestFromRawReturnsOnCall[len(fake.verifyTokenRequestFromRawArgsForCall)]
	fake.verifyTokenRequestFromRawArgsForCall = append(fake.verifyTokenRequestFromRawArgsForCall, struct {
		arg1 context.Context
		arg2 func(key string) ([]byte, error)
		arg3 string
		arg4 []byte
	}{arg1, arg2, arg3, arg4Copy})
	stub := fake.VerifyTokenRequestFromRawStub
	fakeReturns := fake.verifyTokenRequestFromRawReturns
	fake.recordInvocation("VerifyTokenRequestFromRaw", []interface{}{arg1, arg2, arg3, arg4Copy})
	fake.verifyTokenRequestFromRawMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *Validator) VerifyTokenRequestFromRawCallCount() int {
	fake.verifyTokenRequestFromRawMutex.RLock()
	defer fake.verifyTokenRequestFromRawMutex.RUnlock()
	return len(fake.verifyTokenRequestFromRawArgsForCall)
}

func (fake *Validator) VerifyTokenRequestFromRawCalls(stub func(context.Context, func(key string) ([]byte, error), string, []byte) ([]interface{}, map[string][]byte, error)) {
	fake.verifyTokenRequestFromRawMutex.Lock()
	defer fake.verifyTokenRequestFromRawMutex.Unlock()
	fake.VerifyTokenRequestFromRawStub = stub
}

func (fake *Validator) VerifyTokenRequestFromRawArgsForCall(i int) (context.Context, func(key string) ([]byte, error), string, []byte) {
	fake.verifyTokenRequestFromRawMutex.RLock()
	defer fake.verifyTokenRequestFromRawMutex.RUnlock()
	argsForCall := fake.verifyTokenRequestFromRawArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *Validator) VerifyTokenRequestFromRawReturns(result1 []interface{}, result2 map[string][]byte, result3 error) {
	fake.verifyTokenRequestFromRawMutex.Lock()
	defer fake.verifyTokenRequestFromRawMutex.Unlock()
	fake.VerifyTokenRequestFromRawStub = nil
	fake.verifyTokenRequestFromRawReturns = struct {
		result1 []interface{}
		result2 map[string][]byte
		result3 error
	}{result1, result2, result3}
}

func (fake *Validator) VerifyTokenRequestFromRawReturnsOnCall(i int, result1 []interface{}, result2 map[string][]byte, result3 error) {
	fake.verifyTokenRequestFromRawMutex.Lock()
	defer fake.verifyTokenRequestFromRawMutex.Unlock()
	fake.VerifyTokenRequestFromRawStub = nil
	if fake.verifyTokenRequestFromRawReturnsOnCall == nil {
		fake.verifyTokenRequestFromRawReturnsOnCall = make(map[int]struct {
			result1 []interface{}
			result2 map[string][]byte
			result3 error
		})
	}
	fake.verifyTokenRequestFromRawReturnsOnCall[i] = struct {
		result1 []interface{}
		result2 map[string][]byte
		result3 error
	}{result1, result2, result3}
}

func (fake *Validator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.unmarshalActionsMutex.RLock()
	defer fake.unmarshalActionsMutex.RUnlock()
	fake.verifyTokenRequestFromRawMutex.RLock()
	defer fake.verifyTokenRequestFromRawMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Validator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ driver.Validator = new(Validator)
