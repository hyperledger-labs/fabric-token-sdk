// Code generated by counterfeiter. DO NOT EDIT.
package mock

import (
	"sync"

	"github.com/hyperledger-labs/fabric-smart-client/platform/view/view"
	"github.com/hyperledger-labs/fabric-token-sdk/token/driver"
	"github.com/hyperledger-labs/fabric-token-sdk/token/token"
)

type WalletService struct {
	AuditorWalletStub        func(any) (driver.AuditorWallet, error)
	auditorWalletMutex       sync.RWMutex
	auditorWalletArgsForCall []struct {
		arg1 any
	}
	auditorWalletReturns struct {
		result1 driver.AuditorWallet
		result2 error
	}
	auditorWalletReturnsOnCall map[int]struct {
		result1 driver.AuditorWallet
		result2 error
	}
	CertifierWalletStub        func(any) (driver.CertifierWallet, error)
	certifierWalletMutex       sync.RWMutex
	certifierWalletArgsForCall []struct {
		arg1 any
	}
	certifierWalletReturns struct {
		result1 driver.CertifierWallet
		result2 error
	}
	certifierWalletReturnsOnCall map[int]struct {
		result1 driver.CertifierWallet
		result2 error
	}
	GetAuditInfoStub        func(view.Identity) ([]byte, error)
	getAuditInfoMutex       sync.RWMutex
	getAuditInfoArgsForCall []struct {
		arg1 view.Identity
	}
	getAuditInfoReturns struct {
		result1 []byte
		result2 error
	}
	getAuditInfoReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	GetEnrollmentIDStub        func(view.Identity, []byte) (string, error)
	getEnrollmentIDMutex       sync.RWMutex
	getEnrollmentIDArgsForCall []struct {
		arg1 view.Identity
		arg2 []byte
	}
	getEnrollmentIDReturns struct {
		result1 string
		result2 error
	}
	getEnrollmentIDReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetRevocationHandlerStub        func(view.Identity, []byte) (string, error)
	getRevocationHandlerMutex       sync.RWMutex
	getRevocationHandlerArgsForCall []struct {
		arg1 view.Identity
		arg2 []byte
	}
	getRevocationHandlerReturns struct {
		result1 string
		result2 error
	}
	getRevocationHandlerReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	IssuerWalletStub        func(any) (driver.IssuerWallet, error)
	issuerWalletMutex       sync.RWMutex
	issuerWalletArgsForCall []struct {
		arg1 any
	}
	issuerWalletReturns struct {
		result1 driver.IssuerWallet
		result2 error
	}
	issuerWalletReturnsOnCall map[int]struct {
		result1 driver.IssuerWallet
		result2 error
	}
	OwnerWalletStub        func(any) (driver.OwnerWallet, error)
	ownerWalletMutex       sync.RWMutex
	ownerWalletArgsForCall []struct {
		arg1 any
	}
	ownerWalletReturns struct {
		result1 driver.OwnerWallet
		result2 error
	}
	ownerWalletReturnsOnCall map[int]struct {
		result1 driver.OwnerWallet
		result2 error
	}
	OwnerWalletIDsStub        func() ([]string, error)
	ownerWalletIDsMutex       sync.RWMutex
	ownerWalletIDsArgsForCall []struct {
	}
	ownerWalletIDsReturns struct {
		result1 []string
		result2 error
	}
	ownerWalletIDsReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	RegisterIssuerIdentityStub        func(driver.IdentityConfiguration) error
	registerIssuerIdentityMutex       sync.RWMutex
	registerIssuerIdentityArgsForCall []struct {
		arg1 driver.IdentityConfiguration
	}
	registerIssuerIdentityReturns struct {
		result1 error
	}
	registerIssuerIdentityReturnsOnCall map[int]struct {
		result1 error
	}
	RegisterOwnerIdentityStub        func(driver.IdentityConfiguration) error
	registerOwnerIdentityMutex       sync.RWMutex
	registerOwnerIdentityArgsForCall []struct {
		arg1 driver.IdentityConfiguration
	}
	registerOwnerIdentityReturns struct {
		result1 error
	}
	registerOwnerIdentityReturnsOnCall map[int]struct {
		result1 error
	}
	RegisterRecipientIdentityStub        func(*driver.RecipientData) error
	registerRecipientIdentityMutex       sync.RWMutex
	registerRecipientIdentityArgsForCall []struct {
		arg1 *driver.RecipientData
	}
	registerRecipientIdentityReturns struct {
		result1 error
	}
	registerRecipientIdentityReturnsOnCall map[int]struct {
		result1 error
	}
	SpentIDsStub        func(...*token.ID) ([]string, error)
	spentIDsMutex       sync.RWMutex
	spentIDsArgsForCall []struct {
		arg1 []*token.ID
	}
	spentIDsReturns struct {
		result1 []string
		result2 error
	}
	spentIDsReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	WalletStub        func(view.Identity) driver.Wallet
	walletMutex       sync.RWMutex
	walletArgsForCall []struct {
		arg1 view.Identity
	}
	walletReturns struct {
		result1 driver.Wallet
	}
	walletReturnsOnCall map[int]struct {
		result1 driver.Wallet
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *WalletService) AuditorWallet(arg1 any) (driver.AuditorWallet, error) {
	fake.auditorWalletMutex.Lock()
	ret, specificReturn := fake.auditorWalletReturnsOnCall[len(fake.auditorWalletArgsForCall)]
	fake.auditorWalletArgsForCall = append(fake.auditorWalletArgsForCall, struct {
		arg1 any
	}{arg1})
	stub := fake.AuditorWalletStub
	fakeReturns := fake.auditorWalletReturns
	fake.recordInvocation("AuditorWallet", []interface{}{arg1})
	fake.auditorWalletMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *WalletService) AuditorWalletCallCount() int {
	fake.auditorWalletMutex.RLock()
	defer fake.auditorWalletMutex.RUnlock()
	return len(fake.auditorWalletArgsForCall)
}

func (fake *WalletService) AuditorWalletCalls(stub func(any) (driver.AuditorWallet, error)) {
	fake.auditorWalletMutex.Lock()
	defer fake.auditorWalletMutex.Unlock()
	fake.AuditorWalletStub = stub
}

func (fake *WalletService) AuditorWalletArgsForCall(i int) any {
	fake.auditorWalletMutex.RLock()
	defer fake.auditorWalletMutex.RUnlock()
	argsForCall := fake.auditorWalletArgsForCall[i]
	return argsForCall.arg1
}

func (fake *WalletService) AuditorWalletReturns(result1 driver.AuditorWallet, result2 error) {
	fake.auditorWalletMutex.Lock()
	defer fake.auditorWalletMutex.Unlock()
	fake.AuditorWalletStub = nil
	fake.auditorWalletReturns = struct {
		result1 driver.AuditorWallet
		result2 error
	}{result1, result2}
}

func (fake *WalletService) AuditorWalletReturnsOnCall(i int, result1 driver.AuditorWallet, result2 error) {
	fake.auditorWalletMutex.Lock()
	defer fake.auditorWalletMutex.Unlock()
	fake.AuditorWalletStub = nil
	if fake.auditorWalletReturnsOnCall == nil {
		fake.auditorWalletReturnsOnCall = make(map[int]struct {
			result1 driver.AuditorWallet
			result2 error
		})
	}
	fake.auditorWalletReturnsOnCall[i] = struct {
		result1 driver.AuditorWallet
		result2 error
	}{result1, result2}
}

func (fake *WalletService) CertifierWallet(arg1 any) (driver.CertifierWallet, error) {
	fake.certifierWalletMutex.Lock()
	ret, specificReturn := fake.certifierWalletReturnsOnCall[len(fake.certifierWalletArgsForCall)]
	fake.certifierWalletArgsForCall = append(fake.certifierWalletArgsForCall, struct {
		arg1 any
	}{arg1})
	stub := fake.CertifierWalletStub
	fakeReturns := fake.certifierWalletReturns
	fake.recordInvocation("CertifierWallet", []interface{}{arg1})
	fake.certifierWalletMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *WalletService) CertifierWalletCallCount() int {
	fake.certifierWalletMutex.RLock()
	defer fake.certifierWalletMutex.RUnlock()
	return len(fake.certifierWalletArgsForCall)
}

func (fake *WalletService) CertifierWalletCalls(stub func(any) (driver.CertifierWallet, error)) {
	fake.certifierWalletMutex.Lock()
	defer fake.certifierWalletMutex.Unlock()
	fake.CertifierWalletStub = stub
}

func (fake *WalletService) CertifierWalletArgsForCall(i int) any {
	fake.certifierWalletMutex.RLock()
	defer fake.certifierWalletMutex.RUnlock()
	argsForCall := fake.certifierWalletArgsForCall[i]
	return argsForCall.arg1
}

func (fake *WalletService) CertifierWalletReturns(result1 driver.CertifierWallet, result2 error) {
	fake.certifierWalletMutex.Lock()
	defer fake.certifierWalletMutex.Unlock()
	fake.CertifierWalletStub = nil
	fake.certifierWalletReturns = struct {
		result1 driver.CertifierWallet
		result2 error
	}{result1, result2}
}

func (fake *WalletService) CertifierWalletReturnsOnCall(i int, result1 driver.CertifierWallet, result2 error) {
	fake.certifierWalletMutex.Lock()
	defer fake.certifierWalletMutex.Unlock()
	fake.CertifierWalletStub = nil
	if fake.certifierWalletReturnsOnCall == nil {
		fake.certifierWalletReturnsOnCall = make(map[int]struct {
			result1 driver.CertifierWallet
			result2 error
		})
	}
	fake.certifierWalletReturnsOnCall[i] = struct {
		result1 driver.CertifierWallet
		result2 error
	}{result1, result2}
}

func (fake *WalletService) GetAuditInfo(arg1 view.Identity) ([]byte, error) {
	fake.getAuditInfoMutex.Lock()
	ret, specificReturn := fake.getAuditInfoReturnsOnCall[len(fake.getAuditInfoArgsForCall)]
	fake.getAuditInfoArgsForCall = append(fake.getAuditInfoArgsForCall, struct {
		arg1 view.Identity
	}{arg1})
	stub := fake.GetAuditInfoStub
	fakeReturns := fake.getAuditInfoReturns
	fake.recordInvocation("GetAuditInfo", []interface{}{arg1})
	fake.getAuditInfoMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *WalletService) GetAuditInfoCallCount() int {
	fake.getAuditInfoMutex.RLock()
	defer fake.getAuditInfoMutex.RUnlock()
	return len(fake.getAuditInfoArgsForCall)
}

func (fake *WalletService) GetAuditInfoCalls(stub func(view.Identity) ([]byte, error)) {
	fake.getAuditInfoMutex.Lock()
	defer fake.getAuditInfoMutex.Unlock()
	fake.GetAuditInfoStub = stub
}

func (fake *WalletService) GetAuditInfoArgsForCall(i int) view.Identity {
	fake.getAuditInfoMutex.RLock()
	defer fake.getAuditInfoMutex.RUnlock()
	argsForCall := fake.getAuditInfoArgsForCall[i]
	return argsForCall.arg1
}

func (fake *WalletService) GetAuditInfoReturns(result1 []byte, result2 error) {
	fake.getAuditInfoMutex.Lock()
	defer fake.getAuditInfoMutex.Unlock()
	fake.GetAuditInfoStub = nil
	fake.getAuditInfoReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *WalletService) GetAuditInfoReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.getAuditInfoMutex.Lock()
	defer fake.getAuditInfoMutex.Unlock()
	fake.GetAuditInfoStub = nil
	if fake.getAuditInfoReturnsOnCall == nil {
		fake.getAuditInfoReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.getAuditInfoReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *WalletService) GetEnrollmentID(arg1 view.Identity, arg2 []byte) (string, error) {
	var arg2Copy []byte
	if arg2 != nil {
		arg2Copy = make([]byte, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.getEnrollmentIDMutex.Lock()
	ret, specificReturn := fake.getEnrollmentIDReturnsOnCall[len(fake.getEnrollmentIDArgsForCall)]
	fake.getEnrollmentIDArgsForCall = append(fake.getEnrollmentIDArgsForCall, struct {
		arg1 view.Identity
		arg2 []byte
	}{arg1, arg2Copy})
	stub := fake.GetEnrollmentIDStub
	fakeReturns := fake.getEnrollmentIDReturns
	fake.recordInvocation("GetEnrollmentID", []interface{}{arg1, arg2Copy})
	fake.getEnrollmentIDMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *WalletService) GetEnrollmentIDCallCount() int {
	fake.getEnrollmentIDMutex.RLock()
	defer fake.getEnrollmentIDMutex.RUnlock()
	return len(fake.getEnrollmentIDArgsForCall)
}

func (fake *WalletService) GetEnrollmentIDCalls(stub func(view.Identity, []byte) (string, error)) {
	fake.getEnrollmentIDMutex.Lock()
	defer fake.getEnrollmentIDMutex.Unlock()
	fake.GetEnrollmentIDStub = stub
}

func (fake *WalletService) GetEnrollmentIDArgsForCall(i int) (view.Identity, []byte) {
	fake.getEnrollmentIDMutex.RLock()
	defer fake.getEnrollmentIDMutex.RUnlock()
	argsForCall := fake.getEnrollmentIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *WalletService) GetEnrollmentIDReturns(result1 string, result2 error) {
	fake.getEnrollmentIDMutex.Lock()
	defer fake.getEnrollmentIDMutex.Unlock()
	fake.GetEnrollmentIDStub = nil
	fake.getEnrollmentIDReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *WalletService) GetEnrollmentIDReturnsOnCall(i int, result1 string, result2 error) {
	fake.getEnrollmentIDMutex.Lock()
	defer fake.getEnrollmentIDMutex.Unlock()
	fake.GetEnrollmentIDStub = nil
	if fake.getEnrollmentIDReturnsOnCall == nil {
		fake.getEnrollmentIDReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getEnrollmentIDReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *WalletService) GetRevocationHandler(arg1 view.Identity, arg2 []byte) (string, error) {
	var arg2Copy []byte
	if arg2 != nil {
		arg2Copy = make([]byte, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.getRevocationHandlerMutex.Lock()
	ret, specificReturn := fake.getRevocationHandlerReturnsOnCall[len(fake.getRevocationHandlerArgsForCall)]
	fake.getRevocationHandlerArgsForCall = append(fake.getRevocationHandlerArgsForCall, struct {
		arg1 view.Identity
		arg2 []byte
	}{arg1, arg2Copy})
	stub := fake.GetRevocationHandlerStub
	fakeReturns := fake.getRevocationHandlerReturns
	fake.recordInvocation("GetRevocationHandler", []interface{}{arg1, arg2Copy})
	fake.getRevocationHandlerMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *WalletService) GetRevocationHandlerCallCount() int {
	fake.getRevocationHandlerMutex.RLock()
	defer fake.getRevocationHandlerMutex.RUnlock()
	return len(fake.getRevocationHandlerArgsForCall)
}

func (fake *WalletService) GetRevocationHandlerCalls(stub func(view.Identity, []byte) (string, error)) {
	fake.getRevocationHandlerMutex.Lock()
	defer fake.getRevocationHandlerMutex.Unlock()
	fake.GetRevocationHandlerStub = stub
}

func (fake *WalletService) GetRevocationHandlerArgsForCall(i int) (view.Identity, []byte) {
	fake.getRevocationHandlerMutex.RLock()
	defer fake.getRevocationHandlerMutex.RUnlock()
	argsForCall := fake.getRevocationHandlerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *WalletService) GetRevocationHandlerReturns(result1 string, result2 error) {
	fake.getRevocationHandlerMutex.Lock()
	defer fake.getRevocationHandlerMutex.Unlock()
	fake.GetRevocationHandlerStub = nil
	fake.getRevocationHandlerReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *WalletService) GetRevocationHandlerReturnsOnCall(i int, result1 string, result2 error) {
	fake.getRevocationHandlerMutex.Lock()
	defer fake.getRevocationHandlerMutex.Unlock()
	fake.GetRevocationHandlerStub = nil
	if fake.getRevocationHandlerReturnsOnCall == nil {
		fake.getRevocationHandlerReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getRevocationHandlerReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *WalletService) IssuerWallet(arg1 any) (driver.IssuerWallet, error) {
	fake.issuerWalletMutex.Lock()
	ret, specificReturn := fake.issuerWalletReturnsOnCall[len(fake.issuerWalletArgsForCall)]
	fake.issuerWalletArgsForCall = append(fake.issuerWalletArgsForCall, struct {
		arg1 any
	}{arg1})
	stub := fake.IssuerWalletStub
	fakeReturns := fake.issuerWalletReturns
	fake.recordInvocation("IssuerWallet", []interface{}{arg1})
	fake.issuerWalletMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *WalletService) IssuerWalletCallCount() int {
	fake.issuerWalletMutex.RLock()
	defer fake.issuerWalletMutex.RUnlock()
	return len(fake.issuerWalletArgsForCall)
}

func (fake *WalletService) IssuerWalletCalls(stub func(any) (driver.IssuerWallet, error)) {
	fake.issuerWalletMutex.Lock()
	defer fake.issuerWalletMutex.Unlock()
	fake.IssuerWalletStub = stub
}

func (fake *WalletService) IssuerWalletArgsForCall(i int) any {
	fake.issuerWalletMutex.RLock()
	defer fake.issuerWalletMutex.RUnlock()
	argsForCall := fake.issuerWalletArgsForCall[i]
	return argsForCall.arg1
}

func (fake *WalletService) IssuerWalletReturns(result1 driver.IssuerWallet, result2 error) {
	fake.issuerWalletMutex.Lock()
	defer fake.issuerWalletMutex.Unlock()
	fake.IssuerWalletStub = nil
	fake.issuerWalletReturns = struct {
		result1 driver.IssuerWallet
		result2 error
	}{result1, result2}
}

func (fake *WalletService) IssuerWalletReturnsOnCall(i int, result1 driver.IssuerWallet, result2 error) {
	fake.issuerWalletMutex.Lock()
	defer fake.issuerWalletMutex.Unlock()
	fake.IssuerWalletStub = nil
	if fake.issuerWalletReturnsOnCall == nil {
		fake.issuerWalletReturnsOnCall = make(map[int]struct {
			result1 driver.IssuerWallet
			result2 error
		})
	}
	fake.issuerWalletReturnsOnCall[i] = struct {
		result1 driver.IssuerWallet
		result2 error
	}{result1, result2}
}

func (fake *WalletService) OwnerWallet(arg1 any) (driver.OwnerWallet, error) {
	fake.ownerWalletMutex.Lock()
	ret, specificReturn := fake.ownerWalletReturnsOnCall[len(fake.ownerWalletArgsForCall)]
	fake.ownerWalletArgsForCall = append(fake.ownerWalletArgsForCall, struct {
		arg1 any
	}{arg1})
	stub := fake.OwnerWalletStub
	fakeReturns := fake.ownerWalletReturns
	fake.recordInvocation("OwnerWallet", []interface{}{arg1})
	fake.ownerWalletMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *WalletService) OwnerWalletCallCount() int {
	fake.ownerWalletMutex.RLock()
	defer fake.ownerWalletMutex.RUnlock()
	return len(fake.ownerWalletArgsForCall)
}

func (fake *WalletService) OwnerWalletCalls(stub func(any) (driver.OwnerWallet, error)) {
	fake.ownerWalletMutex.Lock()
	defer fake.ownerWalletMutex.Unlock()
	fake.OwnerWalletStub = stub
}

func (fake *WalletService) OwnerWalletArgsForCall(i int) any {
	fake.ownerWalletMutex.RLock()
	defer fake.ownerWalletMutex.RUnlock()
	argsForCall := fake.ownerWalletArgsForCall[i]
	return argsForCall.arg1
}

func (fake *WalletService) OwnerWalletReturns(result1 driver.OwnerWallet, result2 error) {
	fake.ownerWalletMutex.Lock()
	defer fake.ownerWalletMutex.Unlock()
	fake.OwnerWalletStub = nil
	fake.ownerWalletReturns = struct {
		result1 driver.OwnerWallet
		result2 error
	}{result1, result2}
}

func (fake *WalletService) OwnerWalletReturnsOnCall(i int, result1 driver.OwnerWallet, result2 error) {
	fake.ownerWalletMutex.Lock()
	defer fake.ownerWalletMutex.Unlock()
	fake.OwnerWalletStub = nil
	if fake.ownerWalletReturnsOnCall == nil {
		fake.ownerWalletReturnsOnCall = make(map[int]struct {
			result1 driver.OwnerWallet
			result2 error
		})
	}
	fake.ownerWalletReturnsOnCall[i] = struct {
		result1 driver.OwnerWallet
		result2 error
	}{result1, result2}
}

func (fake *WalletService) OwnerWalletIDs() ([]string, error) {
	fake.ownerWalletIDsMutex.Lock()
	ret, specificReturn := fake.ownerWalletIDsReturnsOnCall[len(fake.ownerWalletIDsArgsForCall)]
	fake.ownerWalletIDsArgsForCall = append(fake.ownerWalletIDsArgsForCall, struct {
	}{})
	stub := fake.OwnerWalletIDsStub
	fakeReturns := fake.ownerWalletIDsReturns
	fake.recordInvocation("OwnerWalletIDs", []interface{}{})
	fake.ownerWalletIDsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *WalletService) OwnerWalletIDsCallCount() int {
	fake.ownerWalletIDsMutex.RLock()
	defer fake.ownerWalletIDsMutex.RUnlock()
	return len(fake.ownerWalletIDsArgsForCall)
}

func (fake *WalletService) OwnerWalletIDsCalls(stub func() ([]string, error)) {
	fake.ownerWalletIDsMutex.Lock()
	defer fake.ownerWalletIDsMutex.Unlock()
	fake.OwnerWalletIDsStub = stub
}

func (fake *WalletService) OwnerWalletIDsReturns(result1 []string, result2 error) {
	fake.ownerWalletIDsMutex.Lock()
	defer fake.ownerWalletIDsMutex.Unlock()
	fake.OwnerWalletIDsStub = nil
	fake.ownerWalletIDsReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *WalletService) OwnerWalletIDsReturnsOnCall(i int, result1 []string, result2 error) {
	fake.ownerWalletIDsMutex.Lock()
	defer fake.ownerWalletIDsMutex.Unlock()
	fake.OwnerWalletIDsStub = nil
	if fake.ownerWalletIDsReturnsOnCall == nil {
		fake.ownerWalletIDsReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.ownerWalletIDsReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *WalletService) RegisterIssuerIdentity(arg1 driver.IdentityConfiguration) error {
	fake.registerIssuerIdentityMutex.Lock()
	ret, specificReturn := fake.registerIssuerIdentityReturnsOnCall[len(fake.registerIssuerIdentityArgsForCall)]
	fake.registerIssuerIdentityArgsForCall = append(fake.registerIssuerIdentityArgsForCall, struct {
		arg1 driver.IdentityConfiguration
	}{arg1})
	stub := fake.RegisterIssuerIdentityStub
	fakeReturns := fake.registerIssuerIdentityReturns
	fake.recordInvocation("RegisterIssuerIdentity", []interface{}{arg1})
	fake.registerIssuerIdentityMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *WalletService) RegisterIssuerIdentityCallCount() int {
	fake.registerIssuerIdentityMutex.RLock()
	defer fake.registerIssuerIdentityMutex.RUnlock()
	return len(fake.registerIssuerIdentityArgsForCall)
}

func (fake *WalletService) RegisterIssuerIdentityCalls(stub func(driver.IdentityConfiguration) error) {
	fake.registerIssuerIdentityMutex.Lock()
	defer fake.registerIssuerIdentityMutex.Unlock()
	fake.RegisterIssuerIdentityStub = stub
}

func (fake *WalletService) RegisterIssuerIdentityArgsForCall(i int) driver.IdentityConfiguration {
	fake.registerIssuerIdentityMutex.RLock()
	defer fake.registerIssuerIdentityMutex.RUnlock()
	argsForCall := fake.registerIssuerIdentityArgsForCall[i]
	return argsForCall.arg1
}

func (fake *WalletService) RegisterIssuerIdentityReturns(result1 error) {
	fake.registerIssuerIdentityMutex.Lock()
	defer fake.registerIssuerIdentityMutex.Unlock()
	fake.RegisterIssuerIdentityStub = nil
	fake.registerIssuerIdentityReturns = struct {
		result1 error
	}{result1}
}

func (fake *WalletService) RegisterIssuerIdentityReturnsOnCall(i int, result1 error) {
	fake.registerIssuerIdentityMutex.Lock()
	defer fake.registerIssuerIdentityMutex.Unlock()
	fake.RegisterIssuerIdentityStub = nil
	if fake.registerIssuerIdentityReturnsOnCall == nil {
		fake.registerIssuerIdentityReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.registerIssuerIdentityReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *WalletService) RegisterOwnerIdentity(arg1 driver.IdentityConfiguration) error {
	fake.registerOwnerIdentityMutex.Lock()
	ret, specificReturn := fake.registerOwnerIdentityReturnsOnCall[len(fake.registerOwnerIdentityArgsForCall)]
	fake.registerOwnerIdentityArgsForCall = append(fake.registerOwnerIdentityArgsForCall, struct {
		arg1 driver.IdentityConfiguration
	}{arg1})
	stub := fake.RegisterOwnerIdentityStub
	fakeReturns := fake.registerOwnerIdentityReturns
	fake.recordInvocation("RegisterOwnerIdentity", []interface{}{arg1})
	fake.registerOwnerIdentityMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *WalletService) RegisterOwnerIdentityCallCount() int {
	fake.registerOwnerIdentityMutex.RLock()
	defer fake.registerOwnerIdentityMutex.RUnlock()
	return len(fake.registerOwnerIdentityArgsForCall)
}

func (fake *WalletService) RegisterOwnerIdentityCalls(stub func(driver.IdentityConfiguration) error) {
	fake.registerOwnerIdentityMutex.Lock()
	defer fake.registerOwnerIdentityMutex.Unlock()
	fake.RegisterOwnerIdentityStub = stub
}

func (fake *WalletService) RegisterOwnerIdentityArgsForCall(i int) driver.IdentityConfiguration {
	fake.registerOwnerIdentityMutex.RLock()
	defer fake.registerOwnerIdentityMutex.RUnlock()
	argsForCall := fake.registerOwnerIdentityArgsForCall[i]
	return argsForCall.arg1
}

func (fake *WalletService) RegisterOwnerIdentityReturns(result1 error) {
	fake.registerOwnerIdentityMutex.Lock()
	defer fake.registerOwnerIdentityMutex.Unlock()
	fake.RegisterOwnerIdentityStub = nil
	fake.registerOwnerIdentityReturns = struct {
		result1 error
	}{result1}
}

func (fake *WalletService) RegisterOwnerIdentityReturnsOnCall(i int, result1 error) {
	fake.registerOwnerIdentityMutex.Lock()
	defer fake.registerOwnerIdentityMutex.Unlock()
	fake.RegisterOwnerIdentityStub = nil
	if fake.registerOwnerIdentityReturnsOnCall == nil {
		fake.registerOwnerIdentityReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.registerOwnerIdentityReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *WalletService) RegisterRecipientIdentity(arg1 *driver.RecipientData) error {
	fake.registerRecipientIdentityMutex.Lock()
	ret, specificReturn := fake.registerRecipientIdentityReturnsOnCall[len(fake.registerRecipientIdentityArgsForCall)]
	fake.registerRecipientIdentityArgsForCall = append(fake.registerRecipientIdentityArgsForCall, struct {
		arg1 *driver.RecipientData
	}{arg1})
	stub := fake.RegisterRecipientIdentityStub
	fakeReturns := fake.registerRecipientIdentityReturns
	fake.recordInvocation("RegisterRecipientIdentity", []interface{}{arg1})
	fake.registerRecipientIdentityMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *WalletService) RegisterRecipientIdentityCallCount() int {
	fake.registerRecipientIdentityMutex.RLock()
	defer fake.registerRecipientIdentityMutex.RUnlock()
	return len(fake.registerRecipientIdentityArgsForCall)
}

func (fake *WalletService) RegisterRecipientIdentityCalls(stub func(*driver.RecipientData) error) {
	fake.registerRecipientIdentityMutex.Lock()
	defer fake.registerRecipientIdentityMutex.Unlock()
	fake.RegisterRecipientIdentityStub = stub
}

func (fake *WalletService) RegisterRecipientIdentityArgsForCall(i int) *driver.RecipientData {
	fake.registerRecipientIdentityMutex.RLock()
	defer fake.registerRecipientIdentityMutex.RUnlock()
	argsForCall := fake.registerRecipientIdentityArgsForCall[i]
	return argsForCall.arg1
}

func (fake *WalletService) RegisterRecipientIdentityReturns(result1 error) {
	fake.registerRecipientIdentityMutex.Lock()
	defer fake.registerRecipientIdentityMutex.Unlock()
	fake.RegisterRecipientIdentityStub = nil
	fake.registerRecipientIdentityReturns = struct {
		result1 error
	}{result1}
}

func (fake *WalletService) RegisterRecipientIdentityReturnsOnCall(i int, result1 error) {
	fake.registerRecipientIdentityMutex.Lock()
	defer fake.registerRecipientIdentityMutex.Unlock()
	fake.RegisterRecipientIdentityStub = nil
	if fake.registerRecipientIdentityReturnsOnCall == nil {
		fake.registerRecipientIdentityReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.registerRecipientIdentityReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *WalletService) SpentIDs(arg1 ...*token.ID) ([]string, error) {
	fake.spentIDsMutex.Lock()
	ret, specificReturn := fake.spentIDsReturnsOnCall[len(fake.spentIDsArgsForCall)]
	fake.spentIDsArgsForCall = append(fake.spentIDsArgsForCall, struct {
		arg1 []*token.ID
	}{arg1})
	stub := fake.SpentIDsStub
	fakeReturns := fake.spentIDsReturns
	fake.recordInvocation("SpentIDs", []interface{}{arg1})
	fake.spentIDsMutex.Unlock()
	if stub != nil {
		return stub(arg1...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *WalletService) SpentIDsCallCount() int {
	fake.spentIDsMutex.RLock()
	defer fake.spentIDsMutex.RUnlock()
	return len(fake.spentIDsArgsForCall)
}

func (fake *WalletService) SpentIDsCalls(stub func(...*token.ID) ([]string, error)) {
	fake.spentIDsMutex.Lock()
	defer fake.spentIDsMutex.Unlock()
	fake.SpentIDsStub = stub
}

func (fake *WalletService) SpentIDsArgsForCall(i int) []*token.ID {
	fake.spentIDsMutex.RLock()
	defer fake.spentIDsMutex.RUnlock()
	argsForCall := fake.spentIDsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *WalletService) SpentIDsReturns(result1 []string, result2 error) {
	fake.spentIDsMutex.Lock()
	defer fake.spentIDsMutex.Unlock()
	fake.SpentIDsStub = nil
	fake.spentIDsReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *WalletService) SpentIDsReturnsOnCall(i int, result1 []string, result2 error) {
	fake.spentIDsMutex.Lock()
	defer fake.spentIDsMutex.Unlock()
	fake.SpentIDsStub = nil
	if fake.spentIDsReturnsOnCall == nil {
		fake.spentIDsReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.spentIDsReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *WalletService) Wallet(arg1 view.Identity) driver.Wallet {
	fake.walletMutex.Lock()
	ret, specificReturn := fake.walletReturnsOnCall[len(fake.walletArgsForCall)]
	fake.walletArgsForCall = append(fake.walletArgsForCall, struct {
		arg1 view.Identity
	}{arg1})
	stub := fake.WalletStub
	fakeReturns := fake.walletReturns
	fake.recordInvocation("Wallet", []interface{}{arg1})
	fake.walletMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *WalletService) WalletCallCount() int {
	fake.walletMutex.RLock()
	defer fake.walletMutex.RUnlock()
	return len(fake.walletArgsForCall)
}

func (fake *WalletService) WalletCalls(stub func(view.Identity) driver.Wallet) {
	fake.walletMutex.Lock()
	defer fake.walletMutex.Unlock()
	fake.WalletStub = stub
}

func (fake *WalletService) WalletArgsForCall(i int) view.Identity {
	fake.walletMutex.RLock()
	defer fake.walletMutex.RUnlock()
	argsForCall := fake.walletArgsForCall[i]
	return argsForCall.arg1
}

func (fake *WalletService) WalletReturns(result1 driver.Wallet) {
	fake.walletMutex.Lock()
	defer fake.walletMutex.Unlock()
	fake.WalletStub = nil
	fake.walletReturns = struct {
		result1 driver.Wallet
	}{result1}
}

func (fake *WalletService) WalletReturnsOnCall(i int, result1 driver.Wallet) {
	fake.walletMutex.Lock()
	defer fake.walletMutex.Unlock()
	fake.WalletStub = nil
	if fake.walletReturnsOnCall == nil {
		fake.walletReturnsOnCall = make(map[int]struct {
			result1 driver.Wallet
		})
	}
	fake.walletReturnsOnCall[i] = struct {
		result1 driver.Wallet
	}{result1}
}

func (fake *WalletService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.auditorWalletMutex.RLock()
	defer fake.auditorWalletMutex.RUnlock()
	fake.certifierWalletMutex.RLock()
	defer fake.certifierWalletMutex.RUnlock()
	fake.getAuditInfoMutex.RLock()
	defer fake.getAuditInfoMutex.RUnlock()
	fake.getEnrollmentIDMutex.RLock()
	defer fake.getEnrollmentIDMutex.RUnlock()
	fake.getRevocationHandlerMutex.RLock()
	defer fake.getRevocationHandlerMutex.RUnlock()
	fake.issuerWalletMutex.RLock()
	defer fake.issuerWalletMutex.RUnlock()
	fake.ownerWalletMutex.RLock()
	defer fake.ownerWalletMutex.RUnlock()
	fake.ownerWalletIDsMutex.RLock()
	defer fake.ownerWalletIDsMutex.RUnlock()
	fake.registerIssuerIdentityMutex.RLock()
	defer fake.registerIssuerIdentityMutex.RUnlock()
	fake.registerOwnerIdentityMutex.RLock()
	defer fake.registerOwnerIdentityMutex.RUnlock()
	fake.registerRecipientIdentityMutex.RLock()
	defer fake.registerRecipientIdentityMutex.RUnlock()
	fake.spentIDsMutex.RLock()
	defer fake.spentIDsMutex.RUnlock()
	fake.walletMutex.RLock()
	defer fake.walletMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *WalletService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ driver.WalletService = new(WalletService)
