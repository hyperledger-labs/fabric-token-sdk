// Code generated by counterfeiter. DO NOT EDIT.
package mock

import (
	"context"
	"sync"

	"github.com/hyperledger-labs/fabric-token-sdk/token/driver"
	"github.com/hyperledger-labs/fabric-token-sdk/token/token"
)

type TokensService struct {
	DeobfuscateStub        func(context.Context, driver.TokenOutput, driver.TokenOutputMetadata) (*token.Token, driver.Identity, []driver.Identity, token.Format, error)
	deobfuscateMutex       sync.RWMutex
	deobfuscateArgsForCall []struct {
		arg1 context.Context
		arg2 driver.TokenOutput
		arg3 driver.TokenOutputMetadata
	}
	deobfuscateReturns struct {
		result1 *token.Token
		result2 driver.Identity
		result3 []driver.Identity
		result4 token.Format
		result5 error
	}
	deobfuscateReturnsOnCall map[int]struct {
		result1 *token.Token
		result2 driver.Identity
		result3 []driver.Identity
		result4 token.Format
		result5 error
	}
	RecipientsStub        func(driver.TokenOutput) ([]driver.Identity, error)
	recipientsMutex       sync.RWMutex
	recipientsArgsForCall []struct {
		arg1 driver.TokenOutput
	}
	recipientsReturns struct {
		result1 []driver.Identity
		result2 error
	}
	recipientsReturnsOnCall map[int]struct {
		result1 []driver.Identity
		result2 error
	}
	SupportedTokenFormatsStub        func() []token.Format
	supportedTokenFormatsMutex       sync.RWMutex
	supportedTokenFormatsArgsForCall []struct {
	}
	supportedTokenFormatsReturns struct {
		result1 []token.Format
	}
	supportedTokenFormatsReturnsOnCall map[int]struct {
		result1 []token.Format
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *TokensService) Deobfuscate(arg1 context.Context, arg2 driver.TokenOutput, arg3 driver.TokenOutputMetadata) (*token.Token, driver.Identity, []driver.Identity, token.Format, error) {
	fake.deobfuscateMutex.Lock()
	ret, specificReturn := fake.deobfuscateReturnsOnCall[len(fake.deobfuscateArgsForCall)]
	fake.deobfuscateArgsForCall = append(fake.deobfuscateArgsForCall, struct {
		arg1 context.Context
		arg2 driver.TokenOutput
		arg3 driver.TokenOutputMetadata
	}{arg1, arg2, arg3})
	stub := fake.DeobfuscateStub
	fakeReturns := fake.deobfuscateReturns
	fake.recordInvocation("Deobfuscate", []interface{}{arg1, arg2, arg3})
	fake.deobfuscateMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3, ret.result4, ret.result5
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3, fakeReturns.result4, fakeReturns.result5
}

func (fake *TokensService) DeobfuscateCallCount() int {
	fake.deobfuscateMutex.RLock()
	defer fake.deobfuscateMutex.RUnlock()
	return len(fake.deobfuscateArgsForCall)
}

func (fake *TokensService) DeobfuscateCalls(stub func(context.Context, driver.TokenOutput, driver.TokenOutputMetadata) (*token.Token, driver.Identity, []driver.Identity, token.Format, error)) {
	fake.deobfuscateMutex.Lock()
	defer fake.deobfuscateMutex.Unlock()
	fake.DeobfuscateStub = stub
}

func (fake *TokensService) DeobfuscateArgsForCall(i int) (context.Context, driver.TokenOutput, driver.TokenOutputMetadata) {
	fake.deobfuscateMutex.RLock()
	defer fake.deobfuscateMutex.RUnlock()
	argsForCall := fake.deobfuscateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *TokensService) DeobfuscateReturns(result1 *token.Token, result2 driver.Identity, result3 []driver.Identity, result4 token.Format, result5 error) {
	fake.deobfuscateMutex.Lock()
	defer fake.deobfuscateMutex.Unlock()
	fake.DeobfuscateStub = nil
	fake.deobfuscateReturns = struct {
		result1 *token.Token
		result2 driver.Identity
		result3 []driver.Identity
		result4 token.Format
		result5 error
	}{result1, result2, result3, result4, result5}
}

func (fake *TokensService) DeobfuscateReturnsOnCall(i int, result1 *token.Token, result2 driver.Identity, result3 []driver.Identity, result4 token.Format, result5 error) {
	fake.deobfuscateMutex.Lock()
	defer fake.deobfuscateMutex.Unlock()
	fake.DeobfuscateStub = nil
	if fake.deobfuscateReturnsOnCall == nil {
		fake.deobfuscateReturnsOnCall = make(map[int]struct {
			result1 *token.Token
			result2 driver.Identity
			result3 []driver.Identity
			result4 token.Format
			result5 error
		})
	}
	fake.deobfuscateReturnsOnCall[i] = struct {
		result1 *token.Token
		result2 driver.Identity
		result3 []driver.Identity
		result4 token.Format
		result5 error
	}{result1, result2, result3, result4, result5}
}

func (fake *TokensService) Recipients(arg1 driver.TokenOutput) ([]driver.Identity, error) {
	fake.recipientsMutex.Lock()
	ret, specificReturn := fake.recipientsReturnsOnCall[len(fake.recipientsArgsForCall)]
	fake.recipientsArgsForCall = append(fake.recipientsArgsForCall, struct {
		arg1 driver.TokenOutput
	}{arg1})
	stub := fake.RecipientsStub
	fakeReturns := fake.recipientsReturns
	fake.recordInvocation("Recipients", []interface{}{arg1})
	fake.recipientsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *TokensService) RecipientsCallCount() int {
	fake.recipientsMutex.RLock()
	defer fake.recipientsMutex.RUnlock()
	return len(fake.recipientsArgsForCall)
}

func (fake *TokensService) RecipientsCalls(stub func(driver.TokenOutput) ([]driver.Identity, error)) {
	fake.recipientsMutex.Lock()
	defer fake.recipientsMutex.Unlock()
	fake.RecipientsStub = stub
}

func (fake *TokensService) RecipientsArgsForCall(i int) driver.TokenOutput {
	fake.recipientsMutex.RLock()
	defer fake.recipientsMutex.RUnlock()
	argsForCall := fake.recipientsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *TokensService) RecipientsReturns(result1 []driver.Identity, result2 error) {
	fake.recipientsMutex.Lock()
	defer fake.recipientsMutex.Unlock()
	fake.RecipientsStub = nil
	fake.recipientsReturns = struct {
		result1 []driver.Identity
		result2 error
	}{result1, result2}
}

func (fake *TokensService) RecipientsReturnsOnCall(i int, result1 []driver.Identity, result2 error) {
	fake.recipientsMutex.Lock()
	defer fake.recipientsMutex.Unlock()
	fake.RecipientsStub = nil
	if fake.recipientsReturnsOnCall == nil {
		fake.recipientsReturnsOnCall = make(map[int]struct {
			result1 []driver.Identity
			result2 error
		})
	}
	fake.recipientsReturnsOnCall[i] = struct {
		result1 []driver.Identity
		result2 error
	}{result1, result2}
}

func (fake *TokensService) SupportedTokenFormats() []token.Format {
	fake.supportedTokenFormatsMutex.Lock()
	ret, specificReturn := fake.supportedTokenFormatsReturnsOnCall[len(fake.supportedTokenFormatsArgsForCall)]
	fake.supportedTokenFormatsArgsForCall = append(fake.supportedTokenFormatsArgsForCall, struct {
	}{})
	stub := fake.SupportedTokenFormatsStub
	fakeReturns := fake.supportedTokenFormatsReturns
	fake.recordInvocation("SupportedTokenFormats", []interface{}{})
	fake.supportedTokenFormatsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *TokensService) SupportedTokenFormatsCallCount() int {
	fake.supportedTokenFormatsMutex.RLock()
	defer fake.supportedTokenFormatsMutex.RUnlock()
	return len(fake.supportedTokenFormatsArgsForCall)
}

func (fake *TokensService) SupportedTokenFormatsCalls(stub func() []token.Format) {
	fake.supportedTokenFormatsMutex.Lock()
	defer fake.supportedTokenFormatsMutex.Unlock()
	fake.SupportedTokenFormatsStub = stub
}

func (fake *TokensService) SupportedTokenFormatsReturns(result1 []token.Format) {
	fake.supportedTokenFormatsMutex.Lock()
	defer fake.supportedTokenFormatsMutex.Unlock()
	fake.SupportedTokenFormatsStub = nil
	fake.supportedTokenFormatsReturns = struct {
		result1 []token.Format
	}{result1}
}

func (fake *TokensService) SupportedTokenFormatsReturnsOnCall(i int, result1 []token.Format) {
	fake.supportedTokenFormatsMutex.Lock()
	defer fake.supportedTokenFormatsMutex.Unlock()
	fake.SupportedTokenFormatsStub = nil
	if fake.supportedTokenFormatsReturnsOnCall == nil {
		fake.supportedTokenFormatsReturnsOnCall = make(map[int]struct {
			result1 []token.Format
		})
	}
	fake.supportedTokenFormatsReturnsOnCall[i] = struct {
		result1 []token.Format
	}{result1}
}

func (fake *TokensService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *TokensService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ driver.TokensService = new(TokensService)
