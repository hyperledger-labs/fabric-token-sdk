// Code generated by counterfeiter. DO NOT EDIT.
package mock

import (
	"sync"

	"github.com/hyperledger-labs/fabric-smart-client/platform/common/services/identity"
	"github.com/hyperledger-labs/fabric-token-sdk/token/driver"
	"github.com/hyperledger-labs/fabric-token-sdk/token/token"
)

type TokensService struct {
	CheckUpgradeProofStub        func([]byte, []byte, []token.LedgerToken) (bool, error)
	checkUpgradeProofMutex       sync.RWMutex
	checkUpgradeProofArgsForCall []struct {
		arg1 []byte
		arg2 []byte
		arg3 []token.LedgerToken
	}
	checkUpgradeProofReturns struct {
		result1 bool
		result2 error
	}
	checkUpgradeProofReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	DeobfuscateStub        func(driver.TokenOutput, driver.TokenOutputMetadata) (*token.Token, identity.Identity, []identity.Identity, token.Format, error)
	deobfuscateMutex       sync.RWMutex
	deobfuscateArgsForCall []struct {
		arg1 driver.TokenOutput
		arg2 driver.TokenOutputMetadata
	}
	deobfuscateReturns struct {
		result1 *token.Token
		result2 identity.Identity
		result3 []identity.Identity
		result4 token.Format
		result5 error
	}
	deobfuscateReturnsOnCall map[int]struct {
		result1 *token.Token
		result2 identity.Identity
		result3 []identity.Identity
		result4 token.Format
		result5 error
	}
	GenUpgradeProofStub        func([]byte, []token.LedgerToken) ([]byte, error)
	genUpgradeProofMutex       sync.RWMutex
	genUpgradeProofArgsForCall []struct {
		arg1 []byte
		arg2 []token.LedgerToken
	}
	genUpgradeProofReturns struct {
		result1 []byte
		result2 error
	}
	genUpgradeProofReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	NewUpgradeChallengeStub        func() ([]byte, error)
	newUpgradeChallengeMutex       sync.RWMutex
	newUpgradeChallengeArgsForCall []struct {
	}
	newUpgradeChallengeReturns struct {
		result1 []byte
		result2 error
	}
	newUpgradeChallengeReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	RecipientsStub        func([]byte) ([]identity.Identity, error)
	recipientsMutex       sync.RWMutex
	recipientsArgsForCall []struct {
		arg1 []byte
	}
	recipientsReturns struct {
		result1 []identity.Identity
		result2 error
	}
	recipientsReturnsOnCall map[int]struct {
		result1 []identity.Identity
		result2 error
	}
	RecipientsStub        func(driver.TokenOutput) ([]identity.Identity, error)
	recipientsMutex       sync.RWMutex
	recipientsArgsForCall []struct {
		arg1 driver.TokenOutput
	}
	recipientsReturns struct {
		result1 []identity.Identity
		result2 error
	}
	recipientsReturnsOnCall map[int]struct {
		result1 []identity.Identity
		result2 error
	}
	SupportedTokenFormatsStub        func() []token.Format
	supportedTokenFormatsMutex       sync.RWMutex
	supportedTokenFormatsArgsForCall []struct {
	}
	supportedTokenFormatsReturns struct {
		result1 []token.Format
	}
	supportedTokenFormatsReturnsOnCall map[int]struct {
		result1 []token.Format
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *TokensService) CheckUpgradeProof(arg1 []byte, arg2 []byte, arg3 []token.LedgerToken) (bool, error) {
	var arg1Copy []byte
	if arg1 != nil {
		arg1Copy = make([]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	var arg2Copy []byte
	if arg2 != nil {
		arg2Copy = make([]byte, len(arg2))
		copy(arg2Copy, arg2)
	}
	var arg3Copy []token.LedgerToken
	if arg3 != nil {
		arg3Copy = make([]token.LedgerToken, len(arg3))
		copy(arg3Copy, arg3)
	}
	fake.checkUpgradeProofMutex.Lock()
	ret, specificReturn := fake.checkUpgradeProofReturnsOnCall[len(fake.checkUpgradeProofArgsForCall)]
	fake.checkUpgradeProofArgsForCall = append(fake.checkUpgradeProofArgsForCall, struct {
		arg1 []byte
		arg2 []byte
		arg3 []token.LedgerToken
	}{arg1Copy, arg2Copy, arg3Copy})
	stub := fake.CheckUpgradeProofStub
	fakeReturns := fake.checkUpgradeProofReturns
	fake.recordInvocation("CheckUpgradeProof", []interface{}{arg1Copy, arg2Copy, arg3Copy})
	fake.checkUpgradeProofMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *TokensService) CheckUpgradeProofCallCount() int {
	fake.checkUpgradeProofMutex.RLock()
	defer fake.checkUpgradeProofMutex.RUnlock()
	return len(fake.checkUpgradeProofArgsForCall)
}

func (fake *TokensService) CheckUpgradeProofCalls(stub func([]byte, []byte, []token.LedgerToken) (bool, error)) {
	fake.checkUpgradeProofMutex.Lock()
	defer fake.checkUpgradeProofMutex.Unlock()
	fake.CheckUpgradeProofStub = stub
}

func (fake *TokensService) CheckUpgradeProofArgsForCall(i int) ([]byte, []byte, []token.LedgerToken) {
	fake.checkUpgradeProofMutex.RLock()
	defer fake.checkUpgradeProofMutex.RUnlock()
	argsForCall := fake.checkUpgradeProofArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *TokensService) CheckUpgradeProofReturns(result1 bool, result2 error) {
	fake.checkUpgradeProofMutex.Lock()
	defer fake.checkUpgradeProofMutex.Unlock()
	fake.CheckUpgradeProofStub = nil
	fake.checkUpgradeProofReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *TokensService) CheckUpgradeProofReturnsOnCall(i int, result1 bool, result2 error) {
	fake.checkUpgradeProofMutex.Lock()
	defer fake.checkUpgradeProofMutex.Unlock()
	fake.CheckUpgradeProofStub = nil
	if fake.checkUpgradeProofReturnsOnCall == nil {
		fake.checkUpgradeProofReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.checkUpgradeProofReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *TokensService) Deobfuscate(arg1 driver.TokenOutput, arg2 driver.TokenOutputMetadata) (*token.Token, identity.Identity, []identity.Identity, token.Format, error) {
	fake.deobfuscateMutex.Lock()
	ret, specificReturn := fake.deobfuscateReturnsOnCall[len(fake.deobfuscateArgsForCall)]
	fake.deobfuscateArgsForCall = append(fake.deobfuscateArgsForCall, struct {
		arg1 driver.TokenOutput
		arg2 driver.TokenOutputMetadata
	}{arg1, arg2})
	stub := fake.DeobfuscateStub
	fakeReturns := fake.deobfuscateReturns
	fake.recordInvocation("Deobfuscate", []interface{}{arg1, arg2})
	fake.deobfuscateMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3, ret.result4, ret.result5
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3, fakeReturns.result4, fakeReturns.result5
}

func (fake *TokensService) DeobfuscateCallCount() int {
	fake.deobfuscateMutex.RLock()
	defer fake.deobfuscateMutex.RUnlock()
	return len(fake.deobfuscateArgsForCall)
}

func (fake *TokensService) DeobfuscateCalls(stub func(driver.TokenOutput, driver.TokenOutputMetadata) (*token.Token, identity.Identity, []identity.Identity, token.Format, error)) {
	fake.deobfuscateMutex.Lock()
	defer fake.deobfuscateMutex.Unlock()
	fake.DeobfuscateStub = stub
}

func (fake *TokensService) DeobfuscateArgsForCall(i int) (driver.TokenOutput, driver.TokenOutputMetadata) {
	fake.deobfuscateMutex.RLock()
	defer fake.deobfuscateMutex.RUnlock()
	argsForCall := fake.deobfuscateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *TokensService) DeobfuscateReturns(result1 *token.Token, result2 identity.Identity, result3 []identity.Identity, result4 token.Format, result5 error) {
	fake.deobfuscateMutex.Lock()
	defer fake.deobfuscateMutex.Unlock()
	fake.DeobfuscateStub = nil
	fake.deobfuscateReturns = struct {
		result1 *token.Token
		result2 identity.Identity
		result3 []identity.Identity
		result4 token.Format
		result5 error
	}{result1, result2, result3, result4, result5}
}

func (fake *TokensService) DeobfuscateReturnsOnCall(i int, result1 *token.Token, result2 identity.Identity, result3 []identity.Identity, result4 token.Format, result5 error) {
	fake.deobfuscateMutex.Lock()
	defer fake.deobfuscateMutex.Unlock()
	fake.DeobfuscateStub = nil
	if fake.deobfuscateReturnsOnCall == nil {
		fake.deobfuscateReturnsOnCall = make(map[int]struct {
			result1 *token.Token
			result2 identity.Identity
			result3 []identity.Identity
			result4 token.Format
			result5 error
		})
	}
	fake.deobfuscateReturnsOnCall[i] = struct {
		result1 *token.Token
		result2 identity.Identity
		result3 []identity.Identity
		result4 token.Format
		result5 error
	}{result1, result2, result3, result4, result5}
}

func (fake *TokensService) GenUpgradeProof(arg1 driver.TokensUpgradeChallenge, arg2 []token.LedgerToken) ([]byte, error) {
	var arg2Copy []token.LedgerToken
	if arg2 != nil {
		arg2Copy = make([]token.LedgerToken, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.genUpgradeProofMutex.Lock()
	ret, specificReturn := fake.genUpgradeProofReturnsOnCall[len(fake.genUpgradeProofArgsForCall)]
	fake.genUpgradeProofArgsForCall = append(fake.genUpgradeProofArgsForCall, struct {
		arg1 []byte
		arg2 []token.LedgerToken
	}{arg1Copy, arg2Copy})
	stub := fake.GenUpgradeProofStub
	fakeReturns := fake.genUpgradeProofReturns
	fake.recordInvocation("GenUpgradeProof", []interface{}{arg1Copy, arg2Copy})
	fake.genUpgradeProofMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *TokensService) GenUpgradeProofCallCount() int {
	fake.genUpgradeProofMutex.RLock()
	defer fake.genUpgradeProofMutex.RUnlock()
	return len(fake.genUpgradeProofArgsForCall)
}

func (fake *TokensService) GenUpgradeProofCalls(stub func([]byte, []token.LedgerToken) ([]byte, error)) {
	fake.genUpgradeProofMutex.Lock()
	defer fake.genUpgradeProofMutex.Unlock()
	fake.GenUpgradeProofStub = stub
}

func (fake *TokensService) GenUpgradeProofArgsForCall(i int) ([]byte, []token.LedgerToken) {
	fake.genUpgradeProofMutex.RLock()
	defer fake.genUpgradeProofMutex.RUnlock()
	argsForCall := fake.genUpgradeProofArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *TokensService) GenUpgradeProofReturns(result1 []byte, result2 error) {
	fake.genUpgradeProofMutex.Lock()
	defer fake.genUpgradeProofMutex.Unlock()
	fake.GenUpgradeProofStub = nil
	fake.genUpgradeProofReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *TokensService) GenUpgradeProofReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.genUpgradeProofMutex.Lock()
	defer fake.genUpgradeProofMutex.Unlock()
	fake.GenUpgradeProofStub = nil
	if fake.genUpgradeProofReturnsOnCall == nil {
		fake.genUpgradeProofReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.genUpgradeProofReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *TokensService) NewUpgradeChallenge() ([]byte, error) {
	fake.newUpgradeChallengeMutex.Lock()
	ret, specificReturn := fake.newUpgradeChallengeReturnsOnCall[len(fake.newUpgradeChallengeArgsForCall)]
	fake.newUpgradeChallengeArgsForCall = append(fake.newUpgradeChallengeArgsForCall, struct {
	}{})
	stub := fake.NewUpgradeChallengeStub
	fakeReturns := fake.newUpgradeChallengeReturns
	fake.recordInvocation("NewUpgradeChallenge", []interface{}{})
	fake.newUpgradeChallengeMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *TokensService) NewUpgradeChallengeCallCount() int {
	fake.newUpgradeChallengeMutex.RLock()
	defer fake.newUpgradeChallengeMutex.RUnlock()
	return len(fake.newUpgradeChallengeArgsForCall)
}

func (fake *TokensService) NewUpgradeChallengeCalls(stub func() ([]byte, error)) {
	fake.newUpgradeChallengeMutex.Lock()
	defer fake.newUpgradeChallengeMutex.Unlock()
	fake.NewUpgradeChallengeStub = stub
}

func (fake *TokensService) NewUpgradeChallengeReturns(result1 []byte, result2 error) {
	fake.newUpgradeChallengeMutex.Lock()
	defer fake.newUpgradeChallengeMutex.Unlock()
	fake.NewUpgradeChallengeStub = nil
	fake.newUpgradeChallengeReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *TokensService) NewUpgradeChallengeReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.newUpgradeChallengeMutex.Lock()
	defer fake.newUpgradeChallengeMutex.Unlock()
	fake.NewUpgradeChallengeStub = nil
	if fake.newUpgradeChallengeReturnsOnCall == nil {
		fake.newUpgradeChallengeReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.newUpgradeChallengeReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *TokensService) Recipients(arg1 []byte) ([]identity.Identity, error) {
	var arg1Copy []byte
	if arg1 != nil {
		arg1Copy = make([]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.recipientsMutex.Lock()
	ret, specificReturn := fake.recipientsReturnsOnCall[len(fake.recipientsArgsForCall)]
	fake.recipientsArgsForCall = append(fake.recipientsArgsForCall, struct {
		arg1 []byte
	}{arg1Copy})
	stub := fake.RecipientsStub
	fakeReturns := fake.recipientsReturns
	fake.recordInvocation("Recipients", []interface{}{arg1Copy})
	fake.recipientsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *TokensService) RecipientsCallCount() int {
	fake.recipientsMutex.RLock()
	defer fake.recipientsMutex.RUnlock()
	return len(fake.recipientsArgsForCall)
}

func (fake *TokensService) RecipientsCalls(stub func([]byte) ([]identity.Identity, error)) {
	fake.recipientsMutex.Lock()
	defer fake.recipientsMutex.Unlock()
	fake.RecipientsStub = stub
}

func (fake *TokensService) RecipientsArgsForCall(i int) []byte {
	fake.recipientsMutex.RLock()
	defer fake.recipientsMutex.RUnlock()
	argsForCall := fake.recipientsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *TokensService) RecipientsReturns(result1 []identity.Identity, result2 error) {
	fake.recipientsMutex.Lock()
	defer fake.recipientsMutex.Unlock()
	fake.RecipientsStub = nil
	fake.recipientsReturns = struct {
		result1 []identity.Identity
		result2 error
	}{result1, result2}
}

func (fake *TokensService) RecipientsReturnsOnCall(i int, result1 []identity.Identity, result2 error) {
	fake.recipientsMutex.Lock()
	defer fake.recipientsMutex.Unlock()
	fake.RecipientsStub = nil
	if fake.recipientsReturnsOnCall == nil {
		fake.recipientsReturnsOnCall = make(map[int]struct {
			result1 []identity.Identity
			result2 error
		})
	}
	fake.recipientsReturnsOnCall[i] = struct {
		result1 []identity.Identity
		result2 error
	}{result1, result2}
}

func (fake *TokensService) Recipients(arg1 driver.TokenOutput) ([]identity.Identity, error) {
	fake.recipientsMutex.Lock()
	ret, specificReturn := fake.recipientsReturnsOnCall[len(fake.recipientsArgsForCall)]
	fake.recipientsArgsForCall = append(fake.recipientsArgsForCall, struct {
		arg1 driver.TokenOutput
	}{arg1})
	stub := fake.RecipientsStub
	fakeReturns := fake.recipientsReturns
	fake.recordInvocation("Recipients", []interface{}{arg1})
	fake.recipientsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *TokensService) RecipientsCallCount() int {
	fake.recipientsMutex.RLock()
	defer fake.recipientsMutex.RUnlock()
	return len(fake.recipientsArgsForCall)
}

func (fake *TokensService) RecipientsCalls(stub func(driver.TokenOutput) ([]identity.Identity, error)) {
	fake.recipientsMutex.Lock()
	defer fake.recipientsMutex.Unlock()
	fake.RecipientsStub = stub
}

func (fake *TokensService) RecipientsArgsForCall(i int) driver.TokenOutput {
	fake.recipientsMutex.RLock()
	defer fake.recipientsMutex.RUnlock()
	argsForCall := fake.recipientsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *TokensService) RecipientsReturns(result1 []identity.Identity, result2 error) {
	fake.recipientsMutex.Lock()
	defer fake.recipientsMutex.Unlock()
	fake.RecipientsStub = nil
	fake.recipientsReturns = struct {
		result1 []identity.Identity
		result2 error
	}{result1, result2}
}

func (fake *TokensService) RecipientsReturnsOnCall(i int, result1 []identity.Identity, result2 error) {
	fake.recipientsMutex.Lock()
	defer fake.recipientsMutex.Unlock()
	fake.RecipientsStub = nil
	if fake.recipientsReturnsOnCall == nil {
		fake.recipientsReturnsOnCall = make(map[int]struct {
			result1 []identity.Identity
			result2 error
		})
	}
	fake.recipientsReturnsOnCall[i] = struct {
		result1 []identity.Identity
		result2 error
	}{result1, result2}
}

func (fake *TokensService) SupportedTokenFormats() []token.Format {
	fake.supportedTokenFormatsMutex.Lock()
	ret, specificReturn := fake.supportedTokenFormatsReturnsOnCall[len(fake.supportedTokenFormatsArgsForCall)]
	fake.supportedTokenFormatsArgsForCall = append(fake.supportedTokenFormatsArgsForCall, struct {
	}{})
	stub := fake.SupportedTokenFormatsStub
	fakeReturns := fake.supportedTokenFormatsReturns
	fake.recordInvocation("SupportedTokenFormats", []interface{}{})
	fake.supportedTokenFormatsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *TokensService) SupportedTokenFormatsCallCount() int {
	fake.supportedTokenFormatsMutex.RLock()
	defer fake.supportedTokenFormatsMutex.RUnlock()
	return len(fake.supportedTokenFormatsArgsForCall)
}

func (fake *TokensService) SupportedTokenFormatsCalls(stub func() []token.Format) {
	fake.supportedTokenFormatsMutex.Lock()
	defer fake.supportedTokenFormatsMutex.Unlock()
	fake.SupportedTokenFormatsStub = stub
}

func (fake *TokensService) SupportedTokenFormatsReturns(result1 []token.Format) {
	fake.supportedTokenFormatsMutex.Lock()
	defer fake.supportedTokenFormatsMutex.Unlock()
	fake.SupportedTokenFormatsStub = nil
	fake.supportedTokenFormatsReturns = struct {
		result1 []token.Format
	}{result1}
}

func (fake *TokensService) SupportedTokenFormatsReturnsOnCall(i int, result1 []token.Format) {
	fake.supportedTokenFormatsMutex.Lock()
	defer fake.supportedTokenFormatsMutex.Unlock()
	fake.SupportedTokenFormatsStub = nil
	if fake.supportedTokenFormatsReturnsOnCall == nil {
		fake.supportedTokenFormatsReturnsOnCall = make(map[int]struct {
			result1 []token.Format
		})
	}
	fake.supportedTokenFormatsReturnsOnCall[i] = struct {
		result1 []token.Format
	}{result1}
}

func (fake *TokensService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.checkUpgradeProofMutex.RLock()
	defer fake.checkUpgradeProofMutex.RUnlock()
	fake.deobfuscateMutex.RLock()
	defer fake.deobfuscateMutex.RUnlock()
	fake.genUpgradeProofMutex.RLock()
	defer fake.genUpgradeProofMutex.RUnlock()
	fake.newUpgradeChallengeMutex.RLock()
	defer fake.newUpgradeChallengeMutex.RUnlock()
	fake.recipientsMutex.RLock()
	defer fake.recipientsMutex.RUnlock()
	fake.supportedTokenFormatsMutex.RLock()
	defer fake.supportedTokenFormatsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *TokensService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ driver.TokensService = new(TokensService)
