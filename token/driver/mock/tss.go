// Code generated by counterfeiter. DO NOT EDIT.
package mock

import (
	"sync"

	"github.com/hyperledger-labs/fabric-smart-client/platform/common/services/identity"
	"github.com/hyperledger-labs/fabric-token-sdk/token/driver"
	"github.com/hyperledger-labs/fabric-token-sdk/token/token"
)

type TokensService struct {
	CheckConversionProofStub        func(driver.TokenUpgradeChallenge, driver.TokenUpgradeProof, []token.LedgerToken) (bool, error)
	checkConversionProofMutex       sync.RWMutex
	checkConversionProofArgsForCall []struct {
		arg1 driver.TokenUpgradeChallenge
		arg2 driver.TokenUpgradeProof
		arg3 []token.LedgerToken
	}
	checkConversionProofReturns struct {
		result1 bool
		result2 error
	}
	checkConversionProofReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	DeobfuscateStub        func([]byte, []byte) (*token.Token, identity.Identity, []identity.Identity, token.Format, error)
	deobfuscateMutex       sync.RWMutex
	deobfuscateArgsForCall []struct {
		arg1 []byte
		arg2 []byte
	}
	deobfuscateReturns struct {
		result1 *token.Token
		result2 identity.Identity
		result3 []identity.Identity
		result4 token.Format
		result5 error
	}
	deobfuscateReturnsOnCall map[int]struct {
		result1 *token.Token
		result2 identity.Identity
		result3 []identity.Identity
		result4 token.Format
		result5 error
	}
	RecipientsStub        func([]byte) ([]identity.Identity, error)
	recipientsMutex       sync.RWMutex
	recipientsArgsForCall []struct {
		arg1 []byte
	}
	recipientsReturns struct {
		result1 []identity.Identity
		result2 error
	}
	recipientsReturnsOnCall map[int]struct {
		result1 []identity.Identity
		result2 error
	}
	GenConversionProofStub        func(driver.TokenUpgradeChallenge, []token.LedgerToken) ([]byte, error)
	genConversionProofMutex       sync.RWMutex
	genConversionProofArgsForCall []struct {
		arg1 driver.TokenUpgradeChallenge
		arg2 []token.LedgerToken
	}
	genConversionProofReturns struct {
		result1 []byte
		result2 error
	}
	genConversionProofReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	NewConversionChallengeStub        func() (driver.TokenUpgradeChallenge, error)
	newConversionChallengeMutex       sync.RWMutex
	newConversionChallengeArgsForCall []struct {
	}
	newConversionChallengeReturns struct {
		result1 driver.TokenUpgradeChallenge
		result2 error
	}
	newConversionChallengeReturnsOnCall map[int]struct {
		result1 driver.TokenUpgradeChallenge
		result2 error
	}
	SupportedTokenFormatsStub        func() []token.Format
	supportedTokenFormatsMutex       sync.RWMutex
	supportedTokenFormatsArgsForCall []struct {
	}
	supportedTokenFormatsReturns struct {
		result1 []token.Format
	}
	supportedTokenFormatsReturnsOnCall map[int]struct {
		result1 []token.Format
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *TokensService) CheckUpgradeProof(arg1 driver.TokenUpgradeChallenge, arg2 driver.TokenUpgradeProof, arg3 []token.LedgerToken) (bool, error) {
	var arg3Copy []token.LedgerToken
	if arg3 != nil {
		arg3Copy = make([]token.LedgerToken, len(arg3))
		copy(arg3Copy, arg3)
	}
	fake.checkConversionProofMutex.Lock()
	ret, specificReturn := fake.checkConversionProofReturnsOnCall[len(fake.checkConversionProofArgsForCall)]
	fake.checkConversionProofArgsForCall = append(fake.checkConversionProofArgsForCall, struct {
		arg1 driver.TokenUpgradeChallenge
		arg2 driver.TokenUpgradeProof
		arg3 []token.LedgerToken
	}{arg1, arg2, arg3Copy})
	stub := fake.CheckConversionProofStub
	fakeReturns := fake.checkConversionProofReturns
	fake.recordInvocation("CheckUpgradeProof", []interface{}{arg1, arg2, arg3Copy})
	fake.checkConversionProofMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *TokensService) CheckConversionProofCallCount() int {
	fake.checkConversionProofMutex.RLock()
	defer fake.checkConversionProofMutex.RUnlock()
	return len(fake.checkConversionProofArgsForCall)
}

func (fake *TokensService) CheckConversionProofCalls(stub func(driver.TokenUpgradeChallenge, driver.TokenUpgradeProof, []token.LedgerToken) (bool, error)) {
	fake.checkConversionProofMutex.Lock()
	defer fake.checkConversionProofMutex.Unlock()
	fake.CheckConversionProofStub = stub
}

func (fake *TokensService) CheckConversionProofArgsForCall(i int) (driver.TokenUpgradeChallenge, driver.TokenUpgradeProof, []token.LedgerToken) {
	fake.checkConversionProofMutex.RLock()
	defer fake.checkConversionProofMutex.RUnlock()
	argsForCall := fake.checkConversionProofArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *TokensService) CheckConversionProofReturns(result1 bool, result2 error) {
	fake.checkConversionProofMutex.Lock()
	defer fake.checkConversionProofMutex.Unlock()
	fake.CheckConversionProofStub = nil
	fake.checkConversionProofReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *TokensService) CheckConversionProofReturnsOnCall(i int, result1 bool, result2 error) {
	fake.checkConversionProofMutex.Lock()
	defer fake.checkConversionProofMutex.Unlock()
	fake.CheckConversionProofStub = nil
	if fake.checkConversionProofReturnsOnCall == nil {
		fake.checkConversionProofReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.checkConversionProofReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *TokensService) Deobfuscate(arg1 []byte, arg2 []byte) (*token.Token, identity.Identity, []identity.Identity, token.Format, error) {
	var arg1Copy []byte
	if arg1 != nil {
		arg1Copy = make([]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	var arg2Copy []byte
	if arg2 != nil {
		arg2Copy = make([]byte, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.deobfuscateMutex.Lock()
	ret, specificReturn := fake.deobfuscateReturnsOnCall[len(fake.deobfuscateArgsForCall)]
	fake.deobfuscateArgsForCall = append(fake.deobfuscateArgsForCall, struct {
		arg1 []byte
		arg2 []byte
	}{arg1Copy, arg2Copy})
	stub := fake.DeobfuscateStub
	fakeReturns := fake.deobfuscateReturns
	fake.recordInvocation("Deobfuscate", []interface{}{arg1Copy, arg2Copy})
	fake.deobfuscateMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3, ret.result4, ret.result5
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3, fakeReturns.result4, fakeReturns.result5
}

func (fake *TokensService) DeobfuscateCallCount() int {
	fake.deobfuscateMutex.RLock()
	defer fake.deobfuscateMutex.RUnlock()
	return len(fake.deobfuscateArgsForCall)
}

func (fake *TokensService) DeobfuscateCalls(stub func([]byte, []byte) (*token.Token, identity.Identity, []identity.Identity, token.Format, error)) {
	fake.deobfuscateMutex.Lock()
	defer fake.deobfuscateMutex.Unlock()
	fake.DeobfuscateStub = stub
}

func (fake *TokensService) DeobfuscateArgsForCall(i int) ([]byte, []byte) {
	fake.deobfuscateMutex.RLock()
	defer fake.deobfuscateMutex.RUnlock()
	argsForCall := fake.deobfuscateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *TokensService) DeobfuscateReturns(result1 *token.Token, result2 identity.Identity, result3 []identity.Identity, result4 token.Format, result5 error) {
	fake.deobfuscateMutex.Lock()
	defer fake.deobfuscateMutex.Unlock()
	fake.DeobfuscateStub = nil
	fake.deobfuscateReturns = struct {
		result1 *token.Token
		result2 identity.Identity
		result3 []identity.Identity
		result4 token.Format
		result5 error
	}{result1, result2, result3, result4, result5}
}

func (fake *TokensService) DeobfuscateReturnsOnCall(i int, result1 *token.Token, result2 identity.Identity, result3 []identity.Identity, result4 token.Format, result5 error) {
	fake.deobfuscateMutex.Lock()
	defer fake.deobfuscateMutex.Unlock()
	fake.DeobfuscateStub = nil
	if fake.deobfuscateReturnsOnCall == nil {
		fake.deobfuscateReturnsOnCall = make(map[int]struct {
			result1 *token.Token
			result2 identity.Identity
			result3 []identity.Identity
			result4 token.Format
			result5 error
		})
	}
	fake.deobfuscateReturnsOnCall[i] = struct {
		result1 *token.Token
		result2 identity.Identity
		result3 []identity.Identity
		result4 token.Format
		result5 error
	}{result1, result2, result3, result4, result5}
}

func (fake *TokensService) Recipients(arg1 []byte) ([]identity.Identity, error) {
	var arg1Copy []byte
	if arg1 != nil {
		arg1Copy = make([]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.recipientsMutex.Lock()
	ret, specificReturn := fake.recipientsReturnsOnCall[len(fake.recipientsArgsForCall)]
	fake.recipientsArgsForCall = append(fake.recipientsArgsForCall, struct {
		arg1 []byte
	}{arg1Copy})
	stub := fake.RecipientsStub
	fakeReturns := fake.recipientsReturns
	fake.recordInvocation("Recipients", []interface{}{arg1Copy})
	fake.recipientsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *TokensService) RecipientsCallCount() int {
	fake.recipientsMutex.RLock()
	defer fake.recipientsMutex.RUnlock()
	return len(fake.recipientsArgsForCall)
}

func (fake *TokensService) RecipientsCalls(stub func([]byte) ([]identity.Identity, error)) {
	fake.recipientsMutex.Lock()
	defer fake.recipientsMutex.Unlock()
	fake.RecipientsStub = stub
}

func (fake *TokensService) RecipientsArgsForCall(i int) []byte {
	fake.recipientsMutex.RLock()
	defer fake.recipientsMutex.RUnlock()
	argsForCall := fake.recipientsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *TokensService) RecipientsReturns(result1 []identity.Identity, result2 error) {
	fake.recipientsMutex.Lock()
	defer fake.recipientsMutex.Unlock()
	fake.RecipientsStub = nil
	fake.recipientsReturns = struct {
		result1 []identity.Identity
		result2 error
	}{result1, result2}
}

func (fake *TokensService) RecipientsReturnsOnCall(i int, result1 []identity.Identity, result2 error) {
	fake.recipientsMutex.Lock()
	defer fake.recipientsMutex.Unlock()
	fake.RecipientsStub = nil
	if fake.recipientsReturnsOnCall == nil {
		fake.recipientsReturnsOnCall = make(map[int]struct {
			result1 []identity.Identity
			result2 error
		})
	}
	fake.recipientsReturnsOnCall[i] = struct {
		result1 []identity.Identity
		result2 error
	}{result1, result2}
}

func (fake *TokensService) GenUpgradeProof(arg1 driver.TokenUpgradeChallenge, arg2 []token.LedgerToken) ([]byte, error) {
	var arg2Copy []token.LedgerToken
	if arg2 != nil {
		arg2Copy = make([]token.LedgerToken, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.genConversionProofMutex.Lock()
	ret, specificReturn := fake.genConversionProofReturnsOnCall[len(fake.genConversionProofArgsForCall)]
	fake.genConversionProofArgsForCall = append(fake.genConversionProofArgsForCall, struct {
		arg1 driver.TokenUpgradeChallenge
		arg2 []token.LedgerToken
	}{arg1, arg2Copy})
	stub := fake.GenConversionProofStub
	fakeReturns := fake.genConversionProofReturns
	fake.recordInvocation("GenUpgradeProof", []interface{}{arg1, arg2Copy})
	fake.genConversionProofMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *TokensService) GenConversionProofCallCount() int {
	fake.genConversionProofMutex.RLock()
	defer fake.genConversionProofMutex.RUnlock()
	return len(fake.genConversionProofArgsForCall)
}

func (fake *TokensService) GenConversionProofCalls(stub func(driver.TokenUpgradeChallenge, []token.LedgerToken) ([]byte, error)) {
	fake.genConversionProofMutex.Lock()
	defer fake.genConversionProofMutex.Unlock()
	fake.GenConversionProofStub = stub
}

func (fake *TokensService) GenConversionProofArgsForCall(i int) (driver.TokenUpgradeChallenge, []token.LedgerToken) {
	fake.genConversionProofMutex.RLock()
	defer fake.genConversionProofMutex.RUnlock()
	argsForCall := fake.genConversionProofArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *TokensService) GenConversionProofReturns(result1 []byte, result2 error) {
	fake.genConversionProofMutex.Lock()
	defer fake.genConversionProofMutex.Unlock()
	fake.GenConversionProofStub = nil
	fake.genConversionProofReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *TokensService) GenConversionProofReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.genConversionProofMutex.Lock()
	defer fake.genConversionProofMutex.Unlock()
	fake.GenConversionProofStub = nil
	if fake.genConversionProofReturnsOnCall == nil {
		fake.genConversionProofReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.genConversionProofReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *TokensService) NewUpgradeChallenge() (driver.TokenUpgradeChallenge, error) {
	fake.newConversionChallengeMutex.Lock()
	ret, specificReturn := fake.newConversionChallengeReturnsOnCall[len(fake.newConversionChallengeArgsForCall)]
	fake.newConversionChallengeArgsForCall = append(fake.newConversionChallengeArgsForCall, struct {
	}{})
	stub := fake.NewConversionChallengeStub
	fakeReturns := fake.newConversionChallengeReturns
	fake.recordInvocation("NewUpgradeChallenge", []interface{}{})
	fake.newConversionChallengeMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *TokensService) NewConversionChallengeCallCount() int {
	fake.newConversionChallengeMutex.RLock()
	defer fake.newConversionChallengeMutex.RUnlock()
	return len(fake.newConversionChallengeArgsForCall)
}

func (fake *TokensService) NewConversionChallengeCalls(stub func() (driver.TokenUpgradeChallenge, error)) {
	fake.newConversionChallengeMutex.Lock()
	defer fake.newConversionChallengeMutex.Unlock()
	fake.NewConversionChallengeStub = stub
}

func (fake *TokensService) NewConversionChallengeReturns(result1 driver.TokenUpgradeChallenge, result2 error) {
	fake.newConversionChallengeMutex.Lock()
	defer fake.newConversionChallengeMutex.Unlock()
	fake.NewConversionChallengeStub = nil
	fake.newConversionChallengeReturns = struct {
		result1 driver.TokenUpgradeChallenge
		result2 error
	}{result1, result2}
}

func (fake *TokensService) NewConversionChallengeReturnsOnCall(i int, result1 driver.TokenUpgradeChallenge, result2 error) {
	fake.newConversionChallengeMutex.Lock()
	defer fake.newConversionChallengeMutex.Unlock()
	fake.NewConversionChallengeStub = nil
	if fake.newConversionChallengeReturnsOnCall == nil {
		fake.newConversionChallengeReturnsOnCall = make(map[int]struct {
			result1 driver.TokenUpgradeChallenge
			result2 error
		})
	}
	fake.newConversionChallengeReturnsOnCall[i] = struct {
		result1 driver.TokenUpgradeChallenge
		result2 error
	}{result1, result2}
}

func (fake *TokensService) SupportedTokenFormats() []token.Format {
	fake.supportedTokenFormatsMutex.Lock()
	ret, specificReturn := fake.supportedTokenFormatsReturnsOnCall[len(fake.supportedTokenFormatsArgsForCall)]
	fake.supportedTokenFormatsArgsForCall = append(fake.supportedTokenFormatsArgsForCall, struct {
	}{})
	stub := fake.SupportedTokenFormatsStub
	fakeReturns := fake.supportedTokenFormatsReturns
	fake.recordInvocation("SupportedTokenFormats", []interface{}{})
	fake.supportedTokenFormatsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *TokensService) SupportedTokenFormatsCallCount() int {
	fake.supportedTokenFormatsMutex.RLock()
	defer fake.supportedTokenFormatsMutex.RUnlock()
	return len(fake.supportedTokenFormatsArgsForCall)
}

func (fake *TokensService) SupportedTokenFormatsCalls(stub func() []token.Format) {
	fake.supportedTokenFormatsMutex.Lock()
	defer fake.supportedTokenFormatsMutex.Unlock()
	fake.SupportedTokenFormatsStub = stub
}

func (fake *TokensService) SupportedTokenFormatsReturns(result1 []token.Format) {
	fake.supportedTokenFormatsMutex.Lock()
	defer fake.supportedTokenFormatsMutex.Unlock()
	fake.SupportedTokenFormatsStub = nil
	fake.supportedTokenFormatsReturns = struct {
		result1 []token.Format
	}{result1}
}

func (fake *TokensService) SupportedTokenFormatsReturnsOnCall(i int, result1 []token.Format) {
	fake.supportedTokenFormatsMutex.Lock()
	defer fake.supportedTokenFormatsMutex.Unlock()
	fake.SupportedTokenFormatsStub = nil
	if fake.supportedTokenFormatsReturnsOnCall == nil {
		fake.supportedTokenFormatsReturnsOnCall = make(map[int]struct {
			result1 []token.Format
		})
	}
	fake.supportedTokenFormatsReturnsOnCall[i] = struct {
		result1 []token.Format
	}{result1}
}

func (fake *TokensService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.checkConversionProofMutex.RLock()
	defer fake.checkConversionProofMutex.RUnlock()
	fake.deobfuscateMutex.RLock()
	defer fake.deobfuscateMutex.RUnlock()
	fake.recipientsMutex.RLock()
	defer fake.recipientsMutex.RUnlock()
	fake.genConversionProofMutex.RLock()
	defer fake.genConversionProofMutex.RUnlock()
	fake.newConversionChallengeMutex.RLock()
	defer fake.newConversionChallengeMutex.RUnlock()
	fake.supportedTokenFormatsMutex.RLock()
	defer fake.supportedTokenFormatsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *TokensService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ driver.TokensService = new(TokensService)
