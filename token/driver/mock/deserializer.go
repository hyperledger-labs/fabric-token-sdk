// Code generated by counterfeiter. DO NOT EDIT.
package mock

import (
	"sync"

	"github.com/hyperledger-labs/fabric-smart-client/platform/view/view"
	"github.com/hyperledger-labs/fabric-token-sdk/token/driver"
)

type Deserializer struct {
	GetAuditorVerifierStub        func(view.Identity) (driver.Verifier, error)
	getAuditorVerifierMutex       sync.RWMutex
	getAuditorVerifierArgsForCall []struct {
		arg1 view.Identity
	}
	getAuditorVerifierReturns struct {
		result1 driver.Verifier
		result2 error
	}
	getAuditorVerifierReturnsOnCall map[int]struct {
		result1 driver.Verifier
		result2 error
	}
	GetIssuerVerifierStub        func(view.Identity) (driver.Verifier, error)
	getIssuerVerifierMutex       sync.RWMutex
	getIssuerVerifierArgsForCall []struct {
		arg1 view.Identity
	}
	getIssuerVerifierReturns struct {
		result1 driver.Verifier
		result2 error
	}
	getIssuerVerifierReturnsOnCall map[int]struct {
		result1 driver.Verifier
		result2 error
	}
	GetOwnerAuditInfoStub        func([]byte, driver.AuditInfoProvider) ([][]byte, error)
	getOwnerAuditInfoMutex       sync.RWMutex
	getOwnerAuditInfoArgsForCall []struct {
		arg1 []byte
		arg2 driver.AuditInfoProvider
	}
	getOwnerAuditInfoReturns struct {
		result1 [][]byte
		result2 error
	}
	getOwnerAuditInfoReturnsOnCall map[int]struct {
		result1 [][]byte
		result2 error
	}
	GetOwnerMatcherStub        func([]byte) (driver.Matcher, error)
	getOwnerMatcherMutex       sync.RWMutex
	getOwnerMatcherArgsForCall []struct {
		arg1 []byte
	}
	getOwnerMatcherReturns struct {
		result1 driver.Matcher
		result2 error
	}
	getOwnerMatcherReturnsOnCall map[int]struct {
		result1 driver.Matcher
		result2 error
	}
	GetOwnerVerifierStub        func(view.Identity) (driver.Verifier, error)
	getOwnerVerifierMutex       sync.RWMutex
	getOwnerVerifierArgsForCall []struct {
		arg1 view.Identity
	}
	getOwnerVerifierReturns struct {
		result1 driver.Verifier
		result2 error
	}
	getOwnerVerifierReturnsOnCall map[int]struct {
		result1 driver.Verifier
		result2 error
	}
	MatchStub        func(view.Identity, []byte) error
	matchMutex       sync.RWMutex
	matchArgsForCall []struct {
		arg1 view.Identity
		arg2 []byte
	}
	matchReturns struct {
		result1 error
	}
	matchReturnsOnCall map[int]struct {
		result1 error
	}
	RecipientsStub        func([]byte) ([]view.Identity, error)
	recipientsMutex       sync.RWMutex
	recipientsArgsForCall []struct {
		arg1 []byte
	}
	recipientsReturns struct {
		result1 []view.Identity
		result2 error
	}
	recipientsReturnsOnCall map[int]struct {
		result1 []view.Identity
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Deserializer) GetAuditorVerifier(arg1 view.Identity) (driver.Verifier, error) {
	fake.getAuditorVerifierMutex.Lock()
	ret, specificReturn := fake.getAuditorVerifierReturnsOnCall[len(fake.getAuditorVerifierArgsForCall)]
	fake.getAuditorVerifierArgsForCall = append(fake.getAuditorVerifierArgsForCall, struct {
		arg1 view.Identity
	}{arg1})
	stub := fake.GetAuditorVerifierStub
	fakeReturns := fake.getAuditorVerifierReturns
	fake.recordInvocation("GetAuditorVerifier", []interface{}{arg1})
	fake.getAuditorVerifierMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Deserializer) GetAuditorVerifierCallCount() int {
	fake.getAuditorVerifierMutex.RLock()
	defer fake.getAuditorVerifierMutex.RUnlock()
	return len(fake.getAuditorVerifierArgsForCall)
}

func (fake *Deserializer) GetAuditorVerifierCalls(stub func(view.Identity) (driver.Verifier, error)) {
	fake.getAuditorVerifierMutex.Lock()
	defer fake.getAuditorVerifierMutex.Unlock()
	fake.GetAuditorVerifierStub = stub
}

func (fake *Deserializer) GetAuditorVerifierArgsForCall(i int) view.Identity {
	fake.getAuditorVerifierMutex.RLock()
	defer fake.getAuditorVerifierMutex.RUnlock()
	argsForCall := fake.getAuditorVerifierArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Deserializer) GetAuditorVerifierReturns(result1 driver.Verifier, result2 error) {
	fake.getAuditorVerifierMutex.Lock()
	defer fake.getAuditorVerifierMutex.Unlock()
	fake.GetAuditorVerifierStub = nil
	fake.getAuditorVerifierReturns = struct {
		result1 driver.Verifier
		result2 error
	}{result1, result2}
}

func (fake *Deserializer) GetAuditorVerifierReturnsOnCall(i int, result1 driver.Verifier, result2 error) {
	fake.getAuditorVerifierMutex.Lock()
	defer fake.getAuditorVerifierMutex.Unlock()
	fake.GetAuditorVerifierStub = nil
	if fake.getAuditorVerifierReturnsOnCall == nil {
		fake.getAuditorVerifierReturnsOnCall = make(map[int]struct {
			result1 driver.Verifier
			result2 error
		})
	}
	fake.getAuditorVerifierReturnsOnCall[i] = struct {
		result1 driver.Verifier
		result2 error
	}{result1, result2}
}

func (fake *Deserializer) GetIssuerVerifier(arg1 view.Identity) (driver.Verifier, error) {
	fake.getIssuerVerifierMutex.Lock()
	ret, specificReturn := fake.getIssuerVerifierReturnsOnCall[len(fake.getIssuerVerifierArgsForCall)]
	fake.getIssuerVerifierArgsForCall = append(fake.getIssuerVerifierArgsForCall, struct {
		arg1 view.Identity
	}{arg1})
	stub := fake.GetIssuerVerifierStub
	fakeReturns := fake.getIssuerVerifierReturns
	fake.recordInvocation("GetIssuerVerifier", []interface{}{arg1})
	fake.getIssuerVerifierMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Deserializer) GetIssuerVerifierCallCount() int {
	fake.getIssuerVerifierMutex.RLock()
	defer fake.getIssuerVerifierMutex.RUnlock()
	return len(fake.getIssuerVerifierArgsForCall)
}

func (fake *Deserializer) GetIssuerVerifierCalls(stub func(view.Identity) (driver.Verifier, error)) {
	fake.getIssuerVerifierMutex.Lock()
	defer fake.getIssuerVerifierMutex.Unlock()
	fake.GetIssuerVerifierStub = stub
}

func (fake *Deserializer) GetIssuerVerifierArgsForCall(i int) view.Identity {
	fake.getIssuerVerifierMutex.RLock()
	defer fake.getIssuerVerifierMutex.RUnlock()
	argsForCall := fake.getIssuerVerifierArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Deserializer) GetIssuerVerifierReturns(result1 driver.Verifier, result2 error) {
	fake.getIssuerVerifierMutex.Lock()
	defer fake.getIssuerVerifierMutex.Unlock()
	fake.GetIssuerVerifierStub = nil
	fake.getIssuerVerifierReturns = struct {
		result1 driver.Verifier
		result2 error
	}{result1, result2}
}

func (fake *Deserializer) GetIssuerVerifierReturnsOnCall(i int, result1 driver.Verifier, result2 error) {
	fake.getIssuerVerifierMutex.Lock()
	defer fake.getIssuerVerifierMutex.Unlock()
	fake.GetIssuerVerifierStub = nil
	if fake.getIssuerVerifierReturnsOnCall == nil {
		fake.getIssuerVerifierReturnsOnCall = make(map[int]struct {
			result1 driver.Verifier
			result2 error
		})
	}
	fake.getIssuerVerifierReturnsOnCall[i] = struct {
		result1 driver.Verifier
		result2 error
	}{result1, result2}
}

func (fake *Deserializer) GetOwnerAuditInfo(arg1 []byte, arg2 driver.AuditInfoProvider) ([][]byte, error) {
	var arg1Copy []byte
	if arg1 != nil {
		arg1Copy = make([]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.getOwnerAuditInfoMutex.Lock()
	ret, specificReturn := fake.getOwnerAuditInfoReturnsOnCall[len(fake.getOwnerAuditInfoArgsForCall)]
	fake.getOwnerAuditInfoArgsForCall = append(fake.getOwnerAuditInfoArgsForCall, struct {
		arg1 []byte
		arg2 driver.AuditInfoProvider
	}{arg1Copy, arg2})
	stub := fake.GetOwnerAuditInfoStub
	fakeReturns := fake.getOwnerAuditInfoReturns
	fake.recordInvocation("GetOwnerAuditInfo", []interface{}{arg1Copy, arg2})
	fake.getOwnerAuditInfoMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Deserializer) GetOwnerAuditInfoCallCount() int {
	fake.getOwnerAuditInfoMutex.RLock()
	defer fake.getOwnerAuditInfoMutex.RUnlock()
	return len(fake.getOwnerAuditInfoArgsForCall)
}

func (fake *Deserializer) GetOwnerAuditInfoCalls(stub func([]byte, driver.AuditInfoProvider) ([][]byte, error)) {
	fake.getOwnerAuditInfoMutex.Lock()
	defer fake.getOwnerAuditInfoMutex.Unlock()
	fake.GetOwnerAuditInfoStub = stub
}

func (fake *Deserializer) GetOwnerAuditInfoArgsForCall(i int) ([]byte, driver.AuditInfoProvider) {
	fake.getOwnerAuditInfoMutex.RLock()
	defer fake.getOwnerAuditInfoMutex.RUnlock()
	argsForCall := fake.getOwnerAuditInfoArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *Deserializer) GetOwnerAuditInfoReturns(result1 [][]byte, result2 error) {
	fake.getOwnerAuditInfoMutex.Lock()
	defer fake.getOwnerAuditInfoMutex.Unlock()
	fake.GetOwnerAuditInfoStub = nil
	fake.getOwnerAuditInfoReturns = struct {
		result1 [][]byte
		result2 error
	}{result1, result2}
}

func (fake *Deserializer) GetOwnerAuditInfoReturnsOnCall(i int, result1 [][]byte, result2 error) {
	fake.getOwnerAuditInfoMutex.Lock()
	defer fake.getOwnerAuditInfoMutex.Unlock()
	fake.GetOwnerAuditInfoStub = nil
	if fake.getOwnerAuditInfoReturnsOnCall == nil {
		fake.getOwnerAuditInfoReturnsOnCall = make(map[int]struct {
			result1 [][]byte
			result2 error
		})
	}
	fake.getOwnerAuditInfoReturnsOnCall[i] = struct {
		result1 [][]byte
		result2 error
	}{result1, result2}
}

func (fake *Deserializer) GetOwnerMatcher(arg1 []byte) (driver.Matcher, error) {
	var arg1Copy []byte
	if arg1 != nil {
		arg1Copy = make([]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.getOwnerMatcherMutex.Lock()
	ret, specificReturn := fake.getOwnerMatcherReturnsOnCall[len(fake.getOwnerMatcherArgsForCall)]
	fake.getOwnerMatcherArgsForCall = append(fake.getOwnerMatcherArgsForCall, struct {
		arg1 []byte
	}{arg1Copy})
	stub := fake.GetOwnerMatcherStub
	fakeReturns := fake.getOwnerMatcherReturns
	fake.recordInvocation("GetOwnerMatcher", []interface{}{arg1Copy})
	fake.getOwnerMatcherMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Deserializer) GetOwnerMatcherCallCount() int {
	fake.getOwnerMatcherMutex.RLock()
	defer fake.getOwnerMatcherMutex.RUnlock()
	return len(fake.getOwnerMatcherArgsForCall)
}

func (fake *Deserializer) GetOwnerMatcherCalls(stub func([]byte) (driver.Matcher, error)) {
	fake.getOwnerMatcherMutex.Lock()
	defer fake.getOwnerMatcherMutex.Unlock()
	fake.GetOwnerMatcherStub = stub
}

func (fake *Deserializer) GetOwnerMatcherArgsForCall(i int) []byte {
	fake.getOwnerMatcherMutex.RLock()
	defer fake.getOwnerMatcherMutex.RUnlock()
	argsForCall := fake.getOwnerMatcherArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Deserializer) GetOwnerMatcherReturns(result1 driver.Matcher, result2 error) {
	fake.getOwnerMatcherMutex.Lock()
	defer fake.getOwnerMatcherMutex.Unlock()
	fake.GetOwnerMatcherStub = nil
	fake.getOwnerMatcherReturns = struct {
		result1 driver.Matcher
		result2 error
	}{result1, result2}
}

func (fake *Deserializer) GetOwnerMatcherReturnsOnCall(i int, result1 driver.Matcher, result2 error) {
	fake.getOwnerMatcherMutex.Lock()
	defer fake.getOwnerMatcherMutex.Unlock()
	fake.GetOwnerMatcherStub = nil
	if fake.getOwnerMatcherReturnsOnCall == nil {
		fake.getOwnerMatcherReturnsOnCall = make(map[int]struct {
			result1 driver.Matcher
			result2 error
		})
	}
	fake.getOwnerMatcherReturnsOnCall[i] = struct {
		result1 driver.Matcher
		result2 error
	}{result1, result2}
}

func (fake *Deserializer) GetOwnerVerifier(arg1 view.Identity) (driver.Verifier, error) {
	fake.getOwnerVerifierMutex.Lock()
	ret, specificReturn := fake.getOwnerVerifierReturnsOnCall[len(fake.getOwnerVerifierArgsForCall)]
	fake.getOwnerVerifierArgsForCall = append(fake.getOwnerVerifierArgsForCall, struct {
		arg1 view.Identity
	}{arg1})
	stub := fake.GetOwnerVerifierStub
	fakeReturns := fake.getOwnerVerifierReturns
	fake.recordInvocation("GetOwnerVerifier", []interface{}{arg1})
	fake.getOwnerVerifierMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Deserializer) GetOwnerVerifierCallCount() int {
	fake.getOwnerVerifierMutex.RLock()
	defer fake.getOwnerVerifierMutex.RUnlock()
	return len(fake.getOwnerVerifierArgsForCall)
}

func (fake *Deserializer) GetOwnerVerifierCalls(stub func(view.Identity) (driver.Verifier, error)) {
	fake.getOwnerVerifierMutex.Lock()
	defer fake.getOwnerVerifierMutex.Unlock()
	fake.GetOwnerVerifierStub = stub
}

func (fake *Deserializer) GetOwnerVerifierArgsForCall(i int) view.Identity {
	fake.getOwnerVerifierMutex.RLock()
	defer fake.getOwnerVerifierMutex.RUnlock()
	argsForCall := fake.getOwnerVerifierArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Deserializer) GetOwnerVerifierReturns(result1 driver.Verifier, result2 error) {
	fake.getOwnerVerifierMutex.Lock()
	defer fake.getOwnerVerifierMutex.Unlock()
	fake.GetOwnerVerifierStub = nil
	fake.getOwnerVerifierReturns = struct {
		result1 driver.Verifier
		result2 error
	}{result1, result2}
}

func (fake *Deserializer) GetOwnerVerifierReturnsOnCall(i int, result1 driver.Verifier, result2 error) {
	fake.getOwnerVerifierMutex.Lock()
	defer fake.getOwnerVerifierMutex.Unlock()
	fake.GetOwnerVerifierStub = nil
	if fake.getOwnerVerifierReturnsOnCall == nil {
		fake.getOwnerVerifierReturnsOnCall = make(map[int]struct {
			result1 driver.Verifier
			result2 error
		})
	}
	fake.getOwnerVerifierReturnsOnCall[i] = struct {
		result1 driver.Verifier
		result2 error
	}{result1, result2}
}

func (fake *Deserializer) Match(arg1 view.Identity, arg2 []byte) error {
	var arg2Copy []byte
	if arg2 != nil {
		arg2Copy = make([]byte, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.matchMutex.Lock()
	ret, specificReturn := fake.matchReturnsOnCall[len(fake.matchArgsForCall)]
	fake.matchArgsForCall = append(fake.matchArgsForCall, struct {
		arg1 view.Identity
		arg2 []byte
	}{arg1, arg2Copy})
	stub := fake.MatchStub
	fakeReturns := fake.matchReturns
	fake.recordInvocation("Match", []interface{}{arg1, arg2Copy})
	fake.matchMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *Deserializer) MatchCallCount() int {
	fake.matchMutex.RLock()
	defer fake.matchMutex.RUnlock()
	return len(fake.matchArgsForCall)
}

func (fake *Deserializer) MatchCalls(stub func(view.Identity, []byte) error) {
	fake.matchMutex.Lock()
	defer fake.matchMutex.Unlock()
	fake.MatchStub = stub
}

func (fake *Deserializer) MatchArgsForCall(i int) (view.Identity, []byte) {
	fake.matchMutex.RLock()
	defer fake.matchMutex.RUnlock()
	argsForCall := fake.matchArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *Deserializer) MatchReturns(result1 error) {
	fake.matchMutex.Lock()
	defer fake.matchMutex.Unlock()
	fake.MatchStub = nil
	fake.matchReturns = struct {
		result1 error
	}{result1}
}

func (fake *Deserializer) MatchReturnsOnCall(i int, result1 error) {
	fake.matchMutex.Lock()
	defer fake.matchMutex.Unlock()
	fake.MatchStub = nil
	if fake.matchReturnsOnCall == nil {
		fake.matchReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.matchReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Deserializer) Recipients(arg1 []byte) ([]view.Identity, error) {
	var arg1Copy []byte
	if arg1 != nil {
		arg1Copy = make([]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.recipientsMutex.Lock()
	ret, specificReturn := fake.recipientsReturnsOnCall[len(fake.recipientsArgsForCall)]
	fake.recipientsArgsForCall = append(fake.recipientsArgsForCall, struct {
		arg1 []byte
	}{arg1Copy})
	stub := fake.RecipientsStub
	fakeReturns := fake.recipientsReturns
	fake.recordInvocation("Recipients", []interface{}{arg1Copy})
	fake.recipientsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Deserializer) RecipientsCallCount() int {
	fake.recipientsMutex.RLock()
	defer fake.recipientsMutex.RUnlock()
	return len(fake.recipientsArgsForCall)
}

func (fake *Deserializer) RecipientsCalls(stub func([]byte) ([]view.Identity, error)) {
	fake.recipientsMutex.Lock()
	defer fake.recipientsMutex.Unlock()
	fake.RecipientsStub = stub
}

func (fake *Deserializer) RecipientsArgsForCall(i int) []byte {
	fake.recipientsMutex.RLock()
	defer fake.recipientsMutex.RUnlock()
	argsForCall := fake.recipientsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Deserializer) RecipientsReturns(result1 []view.Identity, result2 error) {
	fake.recipientsMutex.Lock()
	defer fake.recipientsMutex.Unlock()
	fake.RecipientsStub = nil
	fake.recipientsReturns = struct {
		result1 []view.Identity
		result2 error
	}{result1, result2}
}

func (fake *Deserializer) RecipientsReturnsOnCall(i int, result1 []view.Identity, result2 error) {
	fake.recipientsMutex.Lock()
	defer fake.recipientsMutex.Unlock()
	fake.RecipientsStub = nil
	if fake.recipientsReturnsOnCall == nil {
		fake.recipientsReturnsOnCall = make(map[int]struct {
			result1 []view.Identity
			result2 error
		})
	}
	fake.recipientsReturnsOnCall[i] = struct {
		result1 []view.Identity
		result2 error
	}{result1, result2}
}

func (fake *Deserializer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getAuditorVerifierMutex.RLock()
	defer fake.getAuditorVerifierMutex.RUnlock()
	fake.getIssuerVerifierMutex.RLock()
	defer fake.getIssuerVerifierMutex.RUnlock()
	fake.getOwnerAuditInfoMutex.RLock()
	defer fake.getOwnerAuditInfoMutex.RUnlock()
	fake.getOwnerMatcherMutex.RLock()
	defer fake.getOwnerMatcherMutex.RUnlock()
	fake.getOwnerVerifierMutex.RLock()
	defer fake.getOwnerVerifierMutex.RUnlock()
	fake.matchMutex.RLock()
	defer fake.matchMutex.RUnlock()
	fake.recipientsMutex.RLock()
	defer fake.recipientsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Deserializer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ driver.Deserializer = new(Deserializer)
