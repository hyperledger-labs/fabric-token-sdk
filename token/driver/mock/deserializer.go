// Code generated by counterfeiter. DO NOT EDIT.
package mock

import (
	"sync"

	"github.com/hyperledger-labs/fabric-token-sdk/token/driver"
)

type Deserializer struct {
	GetAuditInfoStub        func(driver.Identity, driver.AuditInfoProvider) ([]byte, error)
	getAuditInfoMutex       sync.RWMutex
	getAuditInfoArgsForCall []struct {
		arg1 driver.Identity
		arg2 driver.AuditInfoProvider
	}
	getAuditInfoReturns struct {
		result1 []byte
		result2 error
	}
	getAuditInfoReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	GetAuditInfoMatcherStub        func(driver.Identity, []byte) (driver.Matcher, error)
	getAuditInfoMatcherMutex       sync.RWMutex
	getAuditInfoMatcherArgsForCall []struct {
		arg1 driver.Identity
		arg2 []byte
	}
	getAuditInfoMatcherReturns struct {
		result1 driver.Matcher
		result2 error
	}
	getAuditInfoMatcherReturnsOnCall map[int]struct {
		result1 driver.Matcher
		result2 error
	}
	GetAuditorVerifierStub        func(driver.Identity) (driver.Verifier, error)
	getAuditorVerifierMutex       sync.RWMutex
	getAuditorVerifierArgsForCall []struct {
		arg1 driver.Identity
	}
	getAuditorVerifierReturns struct {
		result1 driver.Verifier
		result2 error
	}
	getAuditorVerifierReturnsOnCall map[int]struct {
		result1 driver.Verifier
		result2 error
	}
	GetIssuerVerifierStub        func(driver.Identity) (driver.Verifier, error)
	getIssuerVerifierMutex       sync.RWMutex
	getIssuerVerifierArgsForCall []struct {
		arg1 driver.Identity
	}
	getIssuerVerifierReturns struct {
		result1 driver.Verifier
		result2 error
	}
	getIssuerVerifierReturnsOnCall map[int]struct {
		result1 driver.Verifier
		result2 error
	}
	GetOwnerVerifierStub        func(driver.Identity) (driver.Verifier, error)
	getOwnerVerifierMutex       sync.RWMutex
	getOwnerVerifierArgsForCall []struct {
		arg1 driver.Identity
	}
	getOwnerVerifierReturns struct {
		result1 driver.Verifier
		result2 error
	}
	getOwnerVerifierReturnsOnCall map[int]struct {
		result1 driver.Verifier
		result2 error
	}
	MatchIdentityStub        func(driver.Identity, []byte) error
	matchIdentityMutex       sync.RWMutex
	matchIdentityArgsForCall []struct {
		arg1 driver.Identity
		arg2 []byte
	}
	matchIdentityReturns struct {
		result1 error
	}
	matchIdentityReturnsOnCall map[int]struct {
		result1 error
	}
	RecipientsStub        func(driver.Identity) ([]driver.Identity, error)
	recipientsMutex       sync.RWMutex
	recipientsArgsForCall []struct {
		arg1 driver.Identity
	}
	recipientsReturns struct {
		result1 []driver.Identity
		result2 error
	}
	recipientsReturnsOnCall map[int]struct {
		result1 []driver.Identity
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Deserializer) GetAuditInfo(arg1 driver.Identity, arg2 driver.AuditInfoProvider) ([]byte, error) {
	fake.getAuditInfoMutex.Lock()
	ret, specificReturn := fake.getAuditInfoReturnsOnCall[len(fake.getAuditInfoArgsForCall)]
	fake.getAuditInfoArgsForCall = append(fake.getAuditInfoArgsForCall, struct {
		arg1 driver.Identity
		arg2 driver.AuditInfoProvider
	}{arg1, arg2})
	stub := fake.GetAuditInfoStub
	fakeReturns := fake.getAuditInfoReturns
	fake.recordInvocation("GetAuditInfo", []interface{}{arg1, arg2})
	fake.getAuditInfoMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Deserializer) GetAuditInfoCallCount() int {
	fake.getAuditInfoMutex.RLock()
	defer fake.getAuditInfoMutex.RUnlock()
	return len(fake.getAuditInfoArgsForCall)
}

func (fake *Deserializer) GetAuditInfoCalls(stub func(driver.Identity, driver.AuditInfoProvider) ([]byte, error)) {
	fake.getAuditInfoMutex.Lock()
	defer fake.getAuditInfoMutex.Unlock()
	fake.GetAuditInfoStub = stub
}

func (fake *Deserializer) GetAuditInfoArgsForCall(i int) (driver.Identity, driver.AuditInfoProvider) {
	fake.getAuditInfoMutex.RLock()
	defer fake.getAuditInfoMutex.RUnlock()
	argsForCall := fake.getAuditInfoArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *Deserializer) GetAuditInfoReturns(result1 []byte, result2 error) {
	fake.getAuditInfoMutex.Lock()
	defer fake.getAuditInfoMutex.Unlock()
	fake.GetAuditInfoStub = nil
	fake.getAuditInfoReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *Deserializer) GetAuditInfoReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.getAuditInfoMutex.Lock()
	defer fake.getAuditInfoMutex.Unlock()
	fake.GetAuditInfoStub = nil
	if fake.getAuditInfoReturnsOnCall == nil {
		fake.getAuditInfoReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.getAuditInfoReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *Deserializer) GetAuditInfoMatcher(arg1 driver.Identity, arg2 []byte) (driver.Matcher, error) {
	var arg2Copy []byte
	if arg2 != nil {
		arg2Copy = make([]byte, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.getAuditInfoMatcherMutex.Lock()
	ret, specificReturn := fake.getAuditInfoMatcherReturnsOnCall[len(fake.getAuditInfoMatcherArgsForCall)]
	fake.getAuditInfoMatcherArgsForCall = append(fake.getAuditInfoMatcherArgsForCall, struct {
		arg1 driver.Identity
		arg2 []byte
	}{arg1, arg2Copy})
	stub := fake.GetAuditInfoMatcherStub
	fakeReturns := fake.getAuditInfoMatcherReturns
	fake.recordInvocation("GetAuditInfoMatcher", []interface{}{arg1, arg2Copy})
	fake.getAuditInfoMatcherMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Deserializer) GetAuditInfoMatcherCallCount() int {
	fake.getAuditInfoMatcherMutex.RLock()
	defer fake.getAuditInfoMatcherMutex.RUnlock()
	return len(fake.getAuditInfoMatcherArgsForCall)
}

func (fake *Deserializer) GetAuditInfoMatcherCalls(stub func(driver.Identity, []byte) (driver.Matcher, error)) {
	fake.getAuditInfoMatcherMutex.Lock()
	defer fake.getAuditInfoMatcherMutex.Unlock()
	fake.GetAuditInfoMatcherStub = stub
}

func (fake *Deserializer) GetAuditInfoMatcherArgsForCall(i int) (driver.Identity, []byte) {
	fake.getAuditInfoMatcherMutex.RLock()
	defer fake.getAuditInfoMatcherMutex.RUnlock()
	argsForCall := fake.getAuditInfoMatcherArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *Deserializer) GetAuditInfoMatcherReturns(result1 driver.Matcher, result2 error) {
	fake.getAuditInfoMatcherMutex.Lock()
	defer fake.getAuditInfoMatcherMutex.Unlock()
	fake.GetAuditInfoMatcherStub = nil
	fake.getAuditInfoMatcherReturns = struct {
		result1 driver.Matcher
		result2 error
	}{result1, result2}
}

func (fake *Deserializer) GetAuditInfoMatcherReturnsOnCall(i int, result1 driver.Matcher, result2 error) {
	fake.getAuditInfoMatcherMutex.Lock()
	defer fake.getAuditInfoMatcherMutex.Unlock()
	fake.GetAuditInfoMatcherStub = nil
	if fake.getAuditInfoMatcherReturnsOnCall == nil {
		fake.getAuditInfoMatcherReturnsOnCall = make(map[int]struct {
			result1 driver.Matcher
			result2 error
		})
	}
	fake.getAuditInfoMatcherReturnsOnCall[i] = struct {
		result1 driver.Matcher
		result2 error
	}{result1, result2}
}

func (fake *Deserializer) GetAuditorVerifier(arg1 driver.Identity) (driver.Verifier, error) {
	fake.getAuditorVerifierMutex.Lock()
	ret, specificReturn := fake.getAuditorVerifierReturnsOnCall[len(fake.getAuditorVerifierArgsForCall)]
	fake.getAuditorVerifierArgsForCall = append(fake.getAuditorVerifierArgsForCall, struct {
		arg1 driver.Identity
	}{arg1})
	stub := fake.GetAuditorVerifierStub
	fakeReturns := fake.getAuditorVerifierReturns
	fake.recordInvocation("GetAuditorVerifier", []interface{}{arg1})
	fake.getAuditorVerifierMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Deserializer) GetAuditorVerifierCallCount() int {
	fake.getAuditorVerifierMutex.RLock()
	defer fake.getAuditorVerifierMutex.RUnlock()
	return len(fake.getAuditorVerifierArgsForCall)
}

func (fake *Deserializer) GetAuditorVerifierCalls(stub func(driver.Identity) (driver.Verifier, error)) {
	fake.getAuditorVerifierMutex.Lock()
	defer fake.getAuditorVerifierMutex.Unlock()
	fake.GetAuditorVerifierStub = stub
}

func (fake *Deserializer) GetAuditorVerifierArgsForCall(i int) driver.Identity {
	fake.getAuditorVerifierMutex.RLock()
	defer fake.getAuditorVerifierMutex.RUnlock()
	argsForCall := fake.getAuditorVerifierArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Deserializer) GetAuditorVerifierReturns(result1 driver.Verifier, result2 error) {
	fake.getAuditorVerifierMutex.Lock()
	defer fake.getAuditorVerifierMutex.Unlock()
	fake.GetAuditorVerifierStub = nil
	fake.getAuditorVerifierReturns = struct {
		result1 driver.Verifier
		result2 error
	}{result1, result2}
}

func (fake *Deserializer) GetAuditorVerifierReturnsOnCall(i int, result1 driver.Verifier, result2 error) {
	fake.getAuditorVerifierMutex.Lock()
	defer fake.getAuditorVerifierMutex.Unlock()
	fake.GetAuditorVerifierStub = nil
	if fake.getAuditorVerifierReturnsOnCall == nil {
		fake.getAuditorVerifierReturnsOnCall = make(map[int]struct {
			result1 driver.Verifier
			result2 error
		})
	}
	fake.getAuditorVerifierReturnsOnCall[i] = struct {
		result1 driver.Verifier
		result2 error
	}{result1, result2}
}

func (fake *Deserializer) GetIssuerVerifier(arg1 driver.Identity) (driver.Verifier, error) {
	fake.getIssuerVerifierMutex.Lock()
	ret, specificReturn := fake.getIssuerVerifierReturnsOnCall[len(fake.getIssuerVerifierArgsForCall)]
	fake.getIssuerVerifierArgsForCall = append(fake.getIssuerVerifierArgsForCall, struct {
		arg1 driver.Identity
	}{arg1})
	stub := fake.GetIssuerVerifierStub
	fakeReturns := fake.getIssuerVerifierReturns
	fake.recordInvocation("GetIssuerVerifier", []interface{}{arg1})
	fake.getIssuerVerifierMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Deserializer) GetIssuerVerifierCallCount() int {
	fake.getIssuerVerifierMutex.RLock()
	defer fake.getIssuerVerifierMutex.RUnlock()
	return len(fake.getIssuerVerifierArgsForCall)
}

func (fake *Deserializer) GetIssuerVerifierCalls(stub func(driver.Identity) (driver.Verifier, error)) {
	fake.getIssuerVerifierMutex.Lock()
	defer fake.getIssuerVerifierMutex.Unlock()
	fake.GetIssuerVerifierStub = stub
}

func (fake *Deserializer) GetIssuerVerifierArgsForCall(i int) driver.Identity {
	fake.getIssuerVerifierMutex.RLock()
	defer fake.getIssuerVerifierMutex.RUnlock()
	argsForCall := fake.getIssuerVerifierArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Deserializer) GetIssuerVerifierReturns(result1 driver.Verifier, result2 error) {
	fake.getIssuerVerifierMutex.Lock()
	defer fake.getIssuerVerifierMutex.Unlock()
	fake.GetIssuerVerifierStub = nil
	fake.getIssuerVerifierReturns = struct {
		result1 driver.Verifier
		result2 error
	}{result1, result2}
}

func (fake *Deserializer) GetIssuerVerifierReturnsOnCall(i int, result1 driver.Verifier, result2 error) {
	fake.getIssuerVerifierMutex.Lock()
	defer fake.getIssuerVerifierMutex.Unlock()
	fake.GetIssuerVerifierStub = nil
	if fake.getIssuerVerifierReturnsOnCall == nil {
		fake.getIssuerVerifierReturnsOnCall = make(map[int]struct {
			result1 driver.Verifier
			result2 error
		})
	}
	fake.getIssuerVerifierReturnsOnCall[i] = struct {
		result1 driver.Verifier
		result2 error
	}{result1, result2}
}

func (fake *Deserializer) GetOwnerVerifier(arg1 driver.Identity) (driver.Verifier, error) {
	fake.getOwnerVerifierMutex.Lock()
	ret, specificReturn := fake.getOwnerVerifierReturnsOnCall[len(fake.getOwnerVerifierArgsForCall)]
	fake.getOwnerVerifierArgsForCall = append(fake.getOwnerVerifierArgsForCall, struct {
		arg1 driver.Identity
	}{arg1})
	stub := fake.GetOwnerVerifierStub
	fakeReturns := fake.getOwnerVerifierReturns
	fake.recordInvocation("GetOwnerVerifier", []interface{}{arg1})
	fake.getOwnerVerifierMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Deserializer) GetOwnerVerifierCallCount() int {
	fake.getOwnerVerifierMutex.RLock()
	defer fake.getOwnerVerifierMutex.RUnlock()
	return len(fake.getOwnerVerifierArgsForCall)
}

func (fake *Deserializer) GetOwnerVerifierCalls(stub func(driver.Identity) (driver.Verifier, error)) {
	fake.getOwnerVerifierMutex.Lock()
	defer fake.getOwnerVerifierMutex.Unlock()
	fake.GetOwnerVerifierStub = stub
}

func (fake *Deserializer) GetOwnerVerifierArgsForCall(i int) driver.Identity {
	fake.getOwnerVerifierMutex.RLock()
	defer fake.getOwnerVerifierMutex.RUnlock()
	argsForCall := fake.getOwnerVerifierArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Deserializer) GetOwnerVerifierReturns(result1 driver.Verifier, result2 error) {
	fake.getOwnerVerifierMutex.Lock()
	defer fake.getOwnerVerifierMutex.Unlock()
	fake.GetOwnerVerifierStub = nil
	fake.getOwnerVerifierReturns = struct {
		result1 driver.Verifier
		result2 error
	}{result1, result2}
}

func (fake *Deserializer) GetOwnerVerifierReturnsOnCall(i int, result1 driver.Verifier, result2 error) {
	fake.getOwnerVerifierMutex.Lock()
	defer fake.getOwnerVerifierMutex.Unlock()
	fake.GetOwnerVerifierStub = nil
	if fake.getOwnerVerifierReturnsOnCall == nil {
		fake.getOwnerVerifierReturnsOnCall = make(map[int]struct {
			result1 driver.Verifier
			result2 error
		})
	}
	fake.getOwnerVerifierReturnsOnCall[i] = struct {
		result1 driver.Verifier
		result2 error
	}{result1, result2}
}

func (fake *Deserializer) MatchIdentity(arg1 driver.Identity, arg2 []byte) error {
	var arg2Copy []byte
	if arg2 != nil {
		arg2Copy = make([]byte, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.matchIdentityMutex.Lock()
	ret, specificReturn := fake.matchIdentityReturnsOnCall[len(fake.matchIdentityArgsForCall)]
	fake.matchIdentityArgsForCall = append(fake.matchIdentityArgsForCall, struct {
		arg1 driver.Identity
		arg2 []byte
	}{arg1, arg2Copy})
	stub := fake.MatchIdentityStub
	fakeReturns := fake.matchIdentityReturns
	fake.recordInvocation("MatchIdentity", []interface{}{arg1, arg2Copy})
	fake.matchIdentityMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *Deserializer) MatchIdentityCallCount() int {
	fake.matchIdentityMutex.RLock()
	defer fake.matchIdentityMutex.RUnlock()
	return len(fake.matchIdentityArgsForCall)
}

func (fake *Deserializer) MatchIdentityCalls(stub func(driver.Identity, []byte) error) {
	fake.matchIdentityMutex.Lock()
	defer fake.matchIdentityMutex.Unlock()
	fake.MatchIdentityStub = stub
}

func (fake *Deserializer) MatchIdentityArgsForCall(i int) (driver.Identity, []byte) {
	fake.matchIdentityMutex.RLock()
	defer fake.matchIdentityMutex.RUnlock()
	argsForCall := fake.matchIdentityArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *Deserializer) MatchIdentityReturns(result1 error) {
	fake.matchIdentityMutex.Lock()
	defer fake.matchIdentityMutex.Unlock()
	fake.MatchIdentityStub = nil
	fake.matchIdentityReturns = struct {
		result1 error
	}{result1}
}

func (fake *Deserializer) MatchIdentityReturnsOnCall(i int, result1 error) {
	fake.matchIdentityMutex.Lock()
	defer fake.matchIdentityMutex.Unlock()
	fake.MatchIdentityStub = nil
	if fake.matchIdentityReturnsOnCall == nil {
		fake.matchIdentityReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.matchIdentityReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Deserializer) Recipients(arg1 driver.Identity) ([]driver.Identity, error) {
	fake.recipientsMutex.Lock()
	ret, specificReturn := fake.recipientsReturnsOnCall[len(fake.recipientsArgsForCall)]
	fake.recipientsArgsForCall = append(fake.recipientsArgsForCall, struct {
		arg1 driver.Identity
	}{arg1})
	stub := fake.RecipientsStub
	fakeReturns := fake.recipientsReturns
	fake.recordInvocation("Recipients", []interface{}{arg1})
	fake.recipientsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Deserializer) RecipientsCallCount() int {
	fake.recipientsMutex.RLock()
	defer fake.recipientsMutex.RUnlock()
	return len(fake.recipientsArgsForCall)
}

func (fake *Deserializer) RecipientsCalls(stub func(driver.Identity) ([]driver.Identity, error)) {
	fake.recipientsMutex.Lock()
	defer fake.recipientsMutex.Unlock()
	fake.RecipientsStub = stub
}

func (fake *Deserializer) RecipientsArgsForCall(i int) driver.Identity {
	fake.recipientsMutex.RLock()
	defer fake.recipientsMutex.RUnlock()
	argsForCall := fake.recipientsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Deserializer) RecipientsReturns(result1 []driver.Identity, result2 error) {
	fake.recipientsMutex.Lock()
	defer fake.recipientsMutex.Unlock()
	fake.RecipientsStub = nil
	fake.recipientsReturns = struct {
		result1 []driver.Identity
		result2 error
	}{result1, result2}
}

func (fake *Deserializer) RecipientsReturnsOnCall(i int, result1 []driver.Identity, result2 error) {
	fake.recipientsMutex.Lock()
	defer fake.recipientsMutex.Unlock()
	fake.RecipientsStub = nil
	if fake.recipientsReturnsOnCall == nil {
		fake.recipientsReturnsOnCall = make(map[int]struct {
			result1 []driver.Identity
			result2 error
		})
	}
	fake.recipientsReturnsOnCall[i] = struct {
		result1 []driver.Identity
		result2 error
	}{result1, result2}
}

func (fake *Deserializer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getAuditInfoMutex.RLock()
	defer fake.getAuditInfoMutex.RUnlock()
	fake.getAuditInfoMatcherMutex.RLock()
	defer fake.getAuditInfoMatcherMutex.RUnlock()
	fake.getAuditorVerifierMutex.RLock()
	defer fake.getAuditorVerifierMutex.RUnlock()
	fake.getIssuerVerifierMutex.RLock()
	defer fake.getIssuerVerifierMutex.RUnlock()
	fake.getOwnerVerifierMutex.RLock()
	defer fake.getOwnerVerifierMutex.RUnlock()
	fake.matchIdentityMutex.RLock()
	defer fake.matchIdentityMutex.RUnlock()
	fake.recipientsMutex.RLock()
	defer fake.recipientsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Deserializer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ driver.Deserializer = new(Deserializer)
