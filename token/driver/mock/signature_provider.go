// Code generated by counterfeiter. DO NOT EDIT.
package mock

import (
	"context"
	"sync"

	"github.com/hyperledger-labs/fabric-smart-client/platform/common/services/identity"
	"github.com/hyperledger-labs/fabric-token-sdk/token/driver"
)

type SignatureProvider struct {
	HasBeenSignedByStub        func(identity.Identity, driver.Verifier) ([]byte, error)
	hasBeenSignedByMutex       sync.RWMutex
	hasBeenSignedByArgsForCall []struct {
		arg1 identity.Identity
		arg2 driver.Verifier
	}
	hasBeenSignedByReturns struct {
		result1 []byte
		result2 error
	}
	hasBeenSignedByReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	SignaturesStub        func() [][]byte
	signaturesMutex       sync.RWMutex
	signaturesArgsForCall []struct {
	}
	signaturesReturns struct {
		result1 [][]byte
	}
	signaturesReturnsOnCall map[int]struct {
		result1 [][]byte
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *SignatureProvider) HasBeenSignedBy(ctx context.Context, arg1 identity.Identity, arg2 driver.Verifier) ([]byte, error) {
	fake.hasBeenSignedByMutex.Lock()
	ret, specificReturn := fake.hasBeenSignedByReturnsOnCall[len(fake.hasBeenSignedByArgsForCall)]
	fake.hasBeenSignedByArgsForCall = append(fake.hasBeenSignedByArgsForCall, struct {
		arg1 identity.Identity
		arg2 driver.Verifier
	}{arg1, arg2})
	stub := fake.HasBeenSignedByStub
	fakeReturns := fake.hasBeenSignedByReturns
	fake.recordInvocation("HasBeenSignedBy", []interface{}{arg1, arg2})
	fake.hasBeenSignedByMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *SignatureProvider) HasBeenSignedByCallCount() int {
	fake.hasBeenSignedByMutex.RLock()
	defer fake.hasBeenSignedByMutex.RUnlock()
	return len(fake.hasBeenSignedByArgsForCall)
}

func (fake *SignatureProvider) HasBeenSignedByCalls(stub func(identity.Identity, driver.Verifier) ([]byte, error)) {
	fake.hasBeenSignedByMutex.Lock()
	defer fake.hasBeenSignedByMutex.Unlock()
	fake.HasBeenSignedByStub = stub
}

func (fake *SignatureProvider) HasBeenSignedByArgsForCall(i int) (identity.Identity, driver.Verifier) {
	fake.hasBeenSignedByMutex.RLock()
	defer fake.hasBeenSignedByMutex.RUnlock()
	argsForCall := fake.hasBeenSignedByArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *SignatureProvider) HasBeenSignedByReturns(result1 []byte, result2 error) {
	fake.hasBeenSignedByMutex.Lock()
	defer fake.hasBeenSignedByMutex.Unlock()
	fake.HasBeenSignedByStub = nil
	fake.hasBeenSignedByReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *SignatureProvider) HasBeenSignedByReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.hasBeenSignedByMutex.Lock()
	defer fake.hasBeenSignedByMutex.Unlock()
	fake.HasBeenSignedByStub = nil
	if fake.hasBeenSignedByReturnsOnCall == nil {
		fake.hasBeenSignedByReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.hasBeenSignedByReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *SignatureProvider) Signatures() [][]byte {
	fake.signaturesMutex.Lock()
	ret, specificReturn := fake.signaturesReturnsOnCall[len(fake.signaturesArgsForCall)]
	fake.signaturesArgsForCall = append(fake.signaturesArgsForCall, struct {
	}{})
	stub := fake.SignaturesStub
	fakeReturns := fake.signaturesReturns
	fake.recordInvocation("Signatures", []interface{}{})
	fake.signaturesMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *SignatureProvider) SignaturesCallCount() int {
	fake.signaturesMutex.RLock()
	defer fake.signaturesMutex.RUnlock()
	return len(fake.signaturesArgsForCall)
}

func (fake *SignatureProvider) SignaturesCalls(stub func() [][]byte) {
	fake.signaturesMutex.Lock()
	defer fake.signaturesMutex.Unlock()
	fake.SignaturesStub = stub
}

func (fake *SignatureProvider) SignaturesReturns(result1 [][]byte) {
	fake.signaturesMutex.Lock()
	defer fake.signaturesMutex.Unlock()
	fake.SignaturesStub = nil
	fake.signaturesReturns = struct {
		result1 [][]byte
	}{result1}
}

func (fake *SignatureProvider) SignaturesReturnsOnCall(i int, result1 [][]byte) {
	fake.signaturesMutex.Lock()
	defer fake.signaturesMutex.Unlock()
	fake.SignaturesStub = nil
	if fake.signaturesReturnsOnCall == nil {
		fake.signaturesReturnsOnCall = make(map[int]struct {
			result1 [][]byte
		})
	}
	fake.signaturesReturnsOnCall[i] = struct {
		result1 [][]byte
	}{result1}
}

func (fake *SignatureProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.hasBeenSignedByMutex.RLock()
	defer fake.hasBeenSignedByMutex.RUnlock()
	fake.signaturesMutex.RLock()
	defer fake.signaturesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *SignatureProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ driver.SignatureProvider = new(SignatureProvider)
