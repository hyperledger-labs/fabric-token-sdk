// Code generated by counterfeiter. DO NOT EDIT.
package mock

import (
	"sync"

	"github.com/hyperledger-labs/fabric-token-sdk/token/driver"
	"github.com/hyperledger-labs/fabric-token-sdk/token/token"
)

type CertificationClient struct {
	IsCertifiedStub        func(*token.ID) bool
	isCertifiedMutex       sync.RWMutex
	isCertifiedArgsForCall []struct {
		arg1 *token.ID
	}
	isCertifiedReturns struct {
		result1 bool
	}
	isCertifiedReturnsOnCall map[int]struct {
		result1 bool
	}
	RequestCertificationStub        func(...*token.ID) error
	requestCertificationMutex       sync.RWMutex
	requestCertificationArgsForCall []struct {
		arg1 []*token.ID
	}
	requestCertificationReturns struct {
		result1 error
	}
	requestCertificationReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *CertificationClient) IsCertified(arg1 *token.ID) bool {
	fake.isCertifiedMutex.Lock()
	ret, specificReturn := fake.isCertifiedReturnsOnCall[len(fake.isCertifiedArgsForCall)]
	fake.isCertifiedArgsForCall = append(fake.isCertifiedArgsForCall, struct {
		arg1 *token.ID
	}{arg1})
	stub := fake.IsCertifiedStub
	fakeReturns := fake.isCertifiedReturns
	fake.recordInvocation("IsCertified", []interface{}{arg1})
	fake.isCertifiedMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *CertificationClient) IsCertifiedCallCount() int {
	fake.isCertifiedMutex.RLock()
	defer fake.isCertifiedMutex.RUnlock()
	return len(fake.isCertifiedArgsForCall)
}

func (fake *CertificationClient) IsCertifiedCalls(stub func(*token.ID) bool) {
	fake.isCertifiedMutex.Lock()
	defer fake.isCertifiedMutex.Unlock()
	fake.IsCertifiedStub = stub
}

func (fake *CertificationClient) IsCertifiedArgsForCall(i int) *token.ID {
	fake.isCertifiedMutex.RLock()
	defer fake.isCertifiedMutex.RUnlock()
	argsForCall := fake.isCertifiedArgsForCall[i]
	return argsForCall.arg1
}

func (fake *CertificationClient) IsCertifiedReturns(result1 bool) {
	fake.isCertifiedMutex.Lock()
	defer fake.isCertifiedMutex.Unlock()
	fake.IsCertifiedStub = nil
	fake.isCertifiedReturns = struct {
		result1 bool
	}{result1}
}

func (fake *CertificationClient) IsCertifiedReturnsOnCall(i int, result1 bool) {
	fake.isCertifiedMutex.Lock()
	defer fake.isCertifiedMutex.Unlock()
	fake.IsCertifiedStub = nil
	if fake.isCertifiedReturnsOnCall == nil {
		fake.isCertifiedReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.isCertifiedReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *CertificationClient) RequestCertification(arg1 ...*token.ID) error {
	fake.requestCertificationMutex.Lock()
	ret, specificReturn := fake.requestCertificationReturnsOnCall[len(fake.requestCertificationArgsForCall)]
	fake.requestCertificationArgsForCall = append(fake.requestCertificationArgsForCall, struct {
		arg1 []*token.ID
	}{arg1})
	stub := fake.RequestCertificationStub
	fakeReturns := fake.requestCertificationReturns
	fake.recordInvocation("RequestCertification", []interface{}{arg1})
	fake.requestCertificationMutex.Unlock()
	if stub != nil {
		return stub(arg1...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *CertificationClient) RequestCertificationCallCount() int {
	fake.requestCertificationMutex.RLock()
	defer fake.requestCertificationMutex.RUnlock()
	return len(fake.requestCertificationArgsForCall)
}

func (fake *CertificationClient) RequestCertificationCalls(stub func(...*token.ID) error) {
	fake.requestCertificationMutex.Lock()
	defer fake.requestCertificationMutex.Unlock()
	fake.RequestCertificationStub = stub
}

func (fake *CertificationClient) RequestCertificationArgsForCall(i int) []*token.ID {
	fake.requestCertificationMutex.RLock()
	defer fake.requestCertificationMutex.RUnlock()
	argsForCall := fake.requestCertificationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *CertificationClient) RequestCertificationReturns(result1 error) {
	fake.requestCertificationMutex.Lock()
	defer fake.requestCertificationMutex.Unlock()
	fake.RequestCertificationStub = nil
	fake.requestCertificationReturns = struct {
		result1 error
	}{result1}
}

func (fake *CertificationClient) RequestCertificationReturnsOnCall(i int, result1 error) {
	fake.requestCertificationMutex.Lock()
	defer fake.requestCertificationMutex.Unlock()
	fake.RequestCertificationStub = nil
	if fake.requestCertificationReturnsOnCall == nil {
		fake.requestCertificationReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.requestCertificationReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *CertificationClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.isCertifiedMutex.RLock()
	defer fake.isCertifiedMutex.RUnlock()
	fake.requestCertificationMutex.RLock()
	defer fake.requestCertificationMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *CertificationClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ driver.CertificationClient = new(CertificationClient)
