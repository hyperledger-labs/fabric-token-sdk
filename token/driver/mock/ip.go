// Code generated by counterfeiter. DO NOT EDIT.
package mock

import (
	"sync"

	"github.com/hyperledger-labs/fabric-smart-client/platform/view/view"
	"github.com/hyperledger-labs/fabric-token-sdk/token/driver"
)

type IdentityProvider struct {
	BindStub        func(view.Identity, view.Identity) error
	bindMutex       sync.RWMutex
	bindArgsForCall []struct {
		arg1 view.Identity
		arg2 view.Identity
	}
	bindReturns struct {
		result1 error
	}
	bindReturnsOnCall map[int]struct {
		result1 error
	}
	GetAuditInfoStub        func(view.Identity) ([]byte, error)
	getAuditInfoMutex       sync.RWMutex
	getAuditInfoArgsForCall []struct {
		arg1 view.Identity
	}
	getAuditInfoReturns struct {
		result1 []byte
		result2 error
	}
	getAuditInfoReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	GetEnrollmentIDStub        func([]byte) (string, error)
	getEnrollmentIDMutex       sync.RWMutex
	getEnrollmentIDArgsForCall []struct {
		arg1 []byte
	}
	getEnrollmentIDReturns struct {
		result1 string
		result2 error
	}
	getEnrollmentIDReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetRevocationHandlerStub        func([]byte) (string, error)
	getRevocationHandlerMutex       sync.RWMutex
	getRevocationHandlerArgsForCall []struct {
		arg1 []byte
	}
	getRevocationHandlerReturns struct {
		result1 string
		result2 error
	}
	getRevocationHandlerReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetSignerStub        func(view.Identity) (driver.Signer, error)
	getSignerMutex       sync.RWMutex
	getSignerArgsForCall []struct {
		arg1 view.Identity
	}
	getSignerReturns struct {
		result1 driver.Signer
		result2 error
	}
	getSignerReturnsOnCall map[int]struct {
		result1 driver.Signer
		result2 error
	}
	IsMeStub        func(view.Identity) bool
	isMeMutex       sync.RWMutex
	isMeArgsForCall []struct {
		arg1 view.Identity
	}
	isMeReturns struct {
		result1 bool
	}
	isMeReturnsOnCall map[int]struct {
		result1 bool
	}
	RegisterRecipientDataStub        func(*driver.RecipientData) error
	registerRecipientDataMutex       sync.RWMutex
	registerRecipientDataArgsForCall []struct {
		arg1 *driver.RecipientData
	}
	registerRecipientDataReturns struct {
		result1 error
	}
	registerRecipientDataReturnsOnCall map[int]struct {
		result1 error
	}
	RegisterRecipientIdentityStub        func(view.Identity) error
	registerRecipientIdentityMutex       sync.RWMutex
	registerRecipientIdentityArgsForCall []struct {
		arg1 view.Identity
	}
	registerRecipientIdentityReturns struct {
		result1 error
	}
	registerRecipientIdentityReturnsOnCall map[int]struct {
		result1 error
	}
	RegisterSignerStub        func(view.Identity, driver.Signer, driver.Verifier, []byte) error
	registerSignerMutex       sync.RWMutex
	registerSignerArgsForCall []struct {
		arg1 view.Identity
		arg2 driver.Signer
		arg3 driver.Verifier
		arg4 []byte
	}
	registerSignerReturns struct {
		result1 error
	}
	registerSignerReturnsOnCall map[int]struct {
		result1 error
	}
	RegisterVerifierStub        func(view.Identity, driver.Verifier) error
	registerVerifierMutex       sync.RWMutex
	registerVerifierArgsForCall []struct {
		arg1 view.Identity
		arg2 driver.Verifier
	}
	registerVerifierReturns struct {
		result1 error
	}
	registerVerifierReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *IdentityProvider) Bind(arg1 view.Identity, arg2 view.Identity) error {
	fake.bindMutex.Lock()
	ret, specificReturn := fake.bindReturnsOnCall[len(fake.bindArgsForCall)]
	fake.bindArgsForCall = append(fake.bindArgsForCall, struct {
		arg1 view.Identity
		arg2 view.Identity
	}{arg1, arg2})
	stub := fake.BindStub
	fakeReturns := fake.bindReturns
	fake.recordInvocation("Bind", []interface{}{arg1, arg2})
	fake.bindMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *IdentityProvider) BindCallCount() int {
	fake.bindMutex.RLock()
	defer fake.bindMutex.RUnlock()
	return len(fake.bindArgsForCall)
}

func (fake *IdentityProvider) BindCalls(stub func(view.Identity, view.Identity) error) {
	fake.bindMutex.Lock()
	defer fake.bindMutex.Unlock()
	fake.BindStub = stub
}

func (fake *IdentityProvider) BindArgsForCall(i int) (view.Identity, view.Identity) {
	fake.bindMutex.RLock()
	defer fake.bindMutex.RUnlock()
	argsForCall := fake.bindArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *IdentityProvider) BindReturns(result1 error) {
	fake.bindMutex.Lock()
	defer fake.bindMutex.Unlock()
	fake.BindStub = nil
	fake.bindReturns = struct {
		result1 error
	}{result1}
}

func (fake *IdentityProvider) BindReturnsOnCall(i int, result1 error) {
	fake.bindMutex.Lock()
	defer fake.bindMutex.Unlock()
	fake.BindStub = nil
	if fake.bindReturnsOnCall == nil {
		fake.bindReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.bindReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *IdentityProvider) GetAuditInfo(arg1 view.Identity) ([]byte, error) {
	fake.getAuditInfoMutex.Lock()
	ret, specificReturn := fake.getAuditInfoReturnsOnCall[len(fake.getAuditInfoArgsForCall)]
	fake.getAuditInfoArgsForCall = append(fake.getAuditInfoArgsForCall, struct {
		arg1 view.Identity
	}{arg1})
	stub := fake.GetAuditInfoStub
	fakeReturns := fake.getAuditInfoReturns
	fake.recordInvocation("GetAuditInfo", []interface{}{arg1})
	fake.getAuditInfoMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *IdentityProvider) GetAuditInfoCallCount() int {
	fake.getAuditInfoMutex.RLock()
	defer fake.getAuditInfoMutex.RUnlock()
	return len(fake.getAuditInfoArgsForCall)
}

func (fake *IdentityProvider) GetAuditInfoCalls(stub func(view.Identity) ([]byte, error)) {
	fake.getAuditInfoMutex.Lock()
	defer fake.getAuditInfoMutex.Unlock()
	fake.GetAuditInfoStub = stub
}

func (fake *IdentityProvider) GetAuditInfoArgsForCall(i int) view.Identity {
	fake.getAuditInfoMutex.RLock()
	defer fake.getAuditInfoMutex.RUnlock()
	argsForCall := fake.getAuditInfoArgsForCall[i]
	return argsForCall.arg1
}

func (fake *IdentityProvider) GetAuditInfoReturns(result1 []byte, result2 error) {
	fake.getAuditInfoMutex.Lock()
	defer fake.getAuditInfoMutex.Unlock()
	fake.GetAuditInfoStub = nil
	fake.getAuditInfoReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *IdentityProvider) GetAuditInfoReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.getAuditInfoMutex.Lock()
	defer fake.getAuditInfoMutex.Unlock()
	fake.GetAuditInfoStub = nil
	if fake.getAuditInfoReturnsOnCall == nil {
		fake.getAuditInfoReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.getAuditInfoReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *IdentityProvider) GetEnrollmentID(arg1 []byte) (string, error) {
	var arg1Copy []byte
	if arg1 != nil {
		arg1Copy = make([]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.getEnrollmentIDMutex.Lock()
	ret, specificReturn := fake.getEnrollmentIDReturnsOnCall[len(fake.getEnrollmentIDArgsForCall)]
	fake.getEnrollmentIDArgsForCall = append(fake.getEnrollmentIDArgsForCall, struct {
		arg1 []byte
	}{arg1Copy})
	stub := fake.GetEnrollmentIDStub
	fakeReturns := fake.getEnrollmentIDReturns
	fake.recordInvocation("GetEnrollmentID", []interface{}{arg1Copy})
	fake.getEnrollmentIDMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *IdentityProvider) GetEnrollmentIDCallCount() int {
	fake.getEnrollmentIDMutex.RLock()
	defer fake.getEnrollmentIDMutex.RUnlock()
	return len(fake.getEnrollmentIDArgsForCall)
}

func (fake *IdentityProvider) GetEnrollmentIDCalls(stub func([]byte) (string, error)) {
	fake.getEnrollmentIDMutex.Lock()
	defer fake.getEnrollmentIDMutex.Unlock()
	fake.GetEnrollmentIDStub = stub
}

func (fake *IdentityProvider) GetEnrollmentIDArgsForCall(i int) []byte {
	fake.getEnrollmentIDMutex.RLock()
	defer fake.getEnrollmentIDMutex.RUnlock()
	argsForCall := fake.getEnrollmentIDArgsForCall[i]
	return argsForCall.arg1
}

func (fake *IdentityProvider) GetEnrollmentIDReturns(result1 string, result2 error) {
	fake.getEnrollmentIDMutex.Lock()
	defer fake.getEnrollmentIDMutex.Unlock()
	fake.GetEnrollmentIDStub = nil
	fake.getEnrollmentIDReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *IdentityProvider) GetEnrollmentIDReturnsOnCall(i int, result1 string, result2 error) {
	fake.getEnrollmentIDMutex.Lock()
	defer fake.getEnrollmentIDMutex.Unlock()
	fake.GetEnrollmentIDStub = nil
	if fake.getEnrollmentIDReturnsOnCall == nil {
		fake.getEnrollmentIDReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getEnrollmentIDReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *IdentityProvider) GetRevocationHandler(arg1 []byte) (string, error) {
	var arg1Copy []byte
	if arg1 != nil {
		arg1Copy = make([]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.getRevocationHandlerMutex.Lock()
	ret, specificReturn := fake.getRevocationHandlerReturnsOnCall[len(fake.getRevocationHandlerArgsForCall)]
	fake.getRevocationHandlerArgsForCall = append(fake.getRevocationHandlerArgsForCall, struct {
		arg1 []byte
	}{arg1Copy})
	stub := fake.GetRevocationHandlerStub
	fakeReturns := fake.getRevocationHandlerReturns
	fake.recordInvocation("GetRevocationHandler", []interface{}{arg1Copy})
	fake.getRevocationHandlerMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *IdentityProvider) GetRevocationHandlerCallCount() int {
	fake.getRevocationHandlerMutex.RLock()
	defer fake.getRevocationHandlerMutex.RUnlock()
	return len(fake.getRevocationHandlerArgsForCall)
}

func (fake *IdentityProvider) GetRevocationHandlerCalls(stub func([]byte) (string, error)) {
	fake.getRevocationHandlerMutex.Lock()
	defer fake.getRevocationHandlerMutex.Unlock()
	fake.GetRevocationHandlerStub = stub
}

func (fake *IdentityProvider) GetRevocationHandlerArgsForCall(i int) []byte {
	fake.getRevocationHandlerMutex.RLock()
	defer fake.getRevocationHandlerMutex.RUnlock()
	argsForCall := fake.getRevocationHandlerArgsForCall[i]
	return argsForCall.arg1
}

func (fake *IdentityProvider) GetRevocationHandlerReturns(result1 string, result2 error) {
	fake.getRevocationHandlerMutex.Lock()
	defer fake.getRevocationHandlerMutex.Unlock()
	fake.GetRevocationHandlerStub = nil
	fake.getRevocationHandlerReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *IdentityProvider) GetRevocationHandlerReturnsOnCall(i int, result1 string, result2 error) {
	fake.getRevocationHandlerMutex.Lock()
	defer fake.getRevocationHandlerMutex.Unlock()
	fake.GetRevocationHandlerStub = nil
	if fake.getRevocationHandlerReturnsOnCall == nil {
		fake.getRevocationHandlerReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getRevocationHandlerReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *IdentityProvider) GetSigner(arg1 view.Identity) (driver.Signer, error) {
	fake.getSignerMutex.Lock()
	ret, specificReturn := fake.getSignerReturnsOnCall[len(fake.getSignerArgsForCall)]
	fake.getSignerArgsForCall = append(fake.getSignerArgsForCall, struct {
		arg1 view.Identity
	}{arg1})
	stub := fake.GetSignerStub
	fakeReturns := fake.getSignerReturns
	fake.recordInvocation("GetSigner", []interface{}{arg1})
	fake.getSignerMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *IdentityProvider) GetSignerCallCount() int {
	fake.getSignerMutex.RLock()
	defer fake.getSignerMutex.RUnlock()
	return len(fake.getSignerArgsForCall)
}

func (fake *IdentityProvider) GetSignerCalls(stub func(view.Identity) (driver.Signer, error)) {
	fake.getSignerMutex.Lock()
	defer fake.getSignerMutex.Unlock()
	fake.GetSignerStub = stub
}

func (fake *IdentityProvider) GetSignerArgsForCall(i int) view.Identity {
	fake.getSignerMutex.RLock()
	defer fake.getSignerMutex.RUnlock()
	argsForCall := fake.getSignerArgsForCall[i]
	return argsForCall.arg1
}

func (fake *IdentityProvider) GetSignerReturns(result1 driver.Signer, result2 error) {
	fake.getSignerMutex.Lock()
	defer fake.getSignerMutex.Unlock()
	fake.GetSignerStub = nil
	fake.getSignerReturns = struct {
		result1 driver.Signer
		result2 error
	}{result1, result2}
}

func (fake *IdentityProvider) GetSignerReturnsOnCall(i int, result1 driver.Signer, result2 error) {
	fake.getSignerMutex.Lock()
	defer fake.getSignerMutex.Unlock()
	fake.GetSignerStub = nil
	if fake.getSignerReturnsOnCall == nil {
		fake.getSignerReturnsOnCall = make(map[int]struct {
			result1 driver.Signer
			result2 error
		})
	}
	fake.getSignerReturnsOnCall[i] = struct {
		result1 driver.Signer
		result2 error
	}{result1, result2}
}

func (fake *IdentityProvider) IsMe(arg1 view.Identity) bool {
	fake.isMeMutex.Lock()
	ret, specificReturn := fake.isMeReturnsOnCall[len(fake.isMeArgsForCall)]
	fake.isMeArgsForCall = append(fake.isMeArgsForCall, struct {
		arg1 view.Identity
	}{arg1})
	stub := fake.IsMeStub
	fakeReturns := fake.isMeReturns
	fake.recordInvocation("IsMe", []interface{}{arg1})
	fake.isMeMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *IdentityProvider) IsMeCallCount() int {
	fake.isMeMutex.RLock()
	defer fake.isMeMutex.RUnlock()
	return len(fake.isMeArgsForCall)
}

func (fake *IdentityProvider) IsMeCalls(stub func(view.Identity) bool) {
	fake.isMeMutex.Lock()
	defer fake.isMeMutex.Unlock()
	fake.IsMeStub = stub
}

func (fake *IdentityProvider) IsMeArgsForCall(i int) view.Identity {
	fake.isMeMutex.RLock()
	defer fake.isMeMutex.RUnlock()
	argsForCall := fake.isMeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *IdentityProvider) IsMeReturns(result1 bool) {
	fake.isMeMutex.Lock()
	defer fake.isMeMutex.Unlock()
	fake.IsMeStub = nil
	fake.isMeReturns = struct {
		result1 bool
	}{result1}
}

func (fake *IdentityProvider) IsMeReturnsOnCall(i int, result1 bool) {
	fake.isMeMutex.Lock()
	defer fake.isMeMutex.Unlock()
	fake.IsMeStub = nil
	if fake.isMeReturnsOnCall == nil {
		fake.isMeReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.isMeReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *IdentityProvider) RegisterRecipientData(arg1 *driver.RecipientData) error {
	fake.registerRecipientDataMutex.Lock()
	ret, specificReturn := fake.registerRecipientDataReturnsOnCall[len(fake.registerRecipientDataArgsForCall)]
	fake.registerRecipientDataArgsForCall = append(fake.registerRecipientDataArgsForCall, struct {
		arg1 *driver.RecipientData
	}{arg1})
	stub := fake.RegisterRecipientDataStub
	fakeReturns := fake.registerRecipientDataReturns
	fake.recordInvocation("RegisterRecipientData", []interface{}{arg1})
	fake.registerRecipientDataMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *IdentityProvider) RegisterRecipientDataCallCount() int {
	fake.registerRecipientDataMutex.RLock()
	defer fake.registerRecipientDataMutex.RUnlock()
	return len(fake.registerRecipientDataArgsForCall)
}

func (fake *IdentityProvider) RegisterRecipientDataCalls(stub func(*driver.RecipientData) error) {
	fake.registerRecipientDataMutex.Lock()
	defer fake.registerRecipientDataMutex.Unlock()
	fake.RegisterRecipientDataStub = stub
}

func (fake *IdentityProvider) RegisterRecipientDataArgsForCall(i int) *driver.RecipientData {
	fake.registerRecipientDataMutex.RLock()
	defer fake.registerRecipientDataMutex.RUnlock()
	argsForCall := fake.registerRecipientDataArgsForCall[i]
	return argsForCall.arg1
}

func (fake *IdentityProvider) RegisterRecipientDataReturns(result1 error) {
	fake.registerRecipientDataMutex.Lock()
	defer fake.registerRecipientDataMutex.Unlock()
	fake.RegisterRecipientDataStub = nil
	fake.registerRecipientDataReturns = struct {
		result1 error
	}{result1}
}

func (fake *IdentityProvider) RegisterRecipientDataReturnsOnCall(i int, result1 error) {
	fake.registerRecipientDataMutex.Lock()
	defer fake.registerRecipientDataMutex.Unlock()
	fake.RegisterRecipientDataStub = nil
	if fake.registerRecipientDataReturnsOnCall == nil {
		fake.registerRecipientDataReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.registerRecipientDataReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *IdentityProvider) RegisterRecipientIdentity(arg1 view.Identity) error {
	fake.registerRecipientIdentityMutex.Lock()
	ret, specificReturn := fake.registerRecipientIdentityReturnsOnCall[len(fake.registerRecipientIdentityArgsForCall)]
	fake.registerRecipientIdentityArgsForCall = append(fake.registerRecipientIdentityArgsForCall, struct {
		arg1 view.Identity
	}{arg1})
	stub := fake.RegisterRecipientIdentityStub
	fakeReturns := fake.registerRecipientIdentityReturns
	fake.recordInvocation("RegisterRecipientIdentity", []interface{}{arg1})
	fake.registerRecipientIdentityMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *IdentityProvider) RegisterRecipientIdentityCallCount() int {
	fake.registerRecipientIdentityMutex.RLock()
	defer fake.registerRecipientIdentityMutex.RUnlock()
	return len(fake.registerRecipientIdentityArgsForCall)
}

func (fake *IdentityProvider) RegisterRecipientIdentityCalls(stub func(view.Identity) error) {
	fake.registerRecipientIdentityMutex.Lock()
	defer fake.registerRecipientIdentityMutex.Unlock()
	fake.RegisterRecipientIdentityStub = stub
}

func (fake *IdentityProvider) RegisterRecipientIdentityArgsForCall(i int) view.Identity {
	fake.registerRecipientIdentityMutex.RLock()
	defer fake.registerRecipientIdentityMutex.RUnlock()
	argsForCall := fake.registerRecipientIdentityArgsForCall[i]
	return argsForCall.arg1
}

func (fake *IdentityProvider) RegisterRecipientIdentityReturns(result1 error) {
	fake.registerRecipientIdentityMutex.Lock()
	defer fake.registerRecipientIdentityMutex.Unlock()
	fake.RegisterRecipientIdentityStub = nil
	fake.registerRecipientIdentityReturns = struct {
		result1 error
	}{result1}
}

func (fake *IdentityProvider) RegisterRecipientIdentityReturnsOnCall(i int, result1 error) {
	fake.registerRecipientIdentityMutex.Lock()
	defer fake.registerRecipientIdentityMutex.Unlock()
	fake.RegisterRecipientIdentityStub = nil
	if fake.registerRecipientIdentityReturnsOnCall == nil {
		fake.registerRecipientIdentityReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.registerRecipientIdentityReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *IdentityProvider) RegisterSigner(arg1 view.Identity, arg2 driver.Signer, arg3 driver.Verifier, arg4 []byte) error {
	var arg4Copy []byte
	if arg4 != nil {
		arg4Copy = make([]byte, len(arg4))
		copy(arg4Copy, arg4)
	}
	fake.registerSignerMutex.Lock()
	ret, specificReturn := fake.registerSignerReturnsOnCall[len(fake.registerSignerArgsForCall)]
	fake.registerSignerArgsForCall = append(fake.registerSignerArgsForCall, struct {
		arg1 view.Identity
		arg2 driver.Signer
		arg3 driver.Verifier
		arg4 []byte
	}{arg1, arg2, arg3, arg4Copy})
	stub := fake.RegisterSignerStub
	fakeReturns := fake.registerSignerReturns
	fake.recordInvocation("RegisterSigner", []interface{}{arg1, arg2, arg3, arg4Copy})
	fake.registerSignerMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *IdentityProvider) RegisterSignerCallCount() int {
	fake.registerSignerMutex.RLock()
	defer fake.registerSignerMutex.RUnlock()
	return len(fake.registerSignerArgsForCall)
}

func (fake *IdentityProvider) RegisterSignerCalls(stub func(view.Identity, driver.Signer, driver.Verifier, []byte) error) {
	fake.registerSignerMutex.Lock()
	defer fake.registerSignerMutex.Unlock()
	fake.RegisterSignerStub = stub
}

func (fake *IdentityProvider) RegisterSignerArgsForCall(i int) (view.Identity, driver.Signer, driver.Verifier, []byte) {
	fake.registerSignerMutex.RLock()
	defer fake.registerSignerMutex.RUnlock()
	argsForCall := fake.registerSignerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *IdentityProvider) RegisterSignerReturns(result1 error) {
	fake.registerSignerMutex.Lock()
	defer fake.registerSignerMutex.Unlock()
	fake.RegisterSignerStub = nil
	fake.registerSignerReturns = struct {
		result1 error
	}{result1}
}

func (fake *IdentityProvider) RegisterSignerReturnsOnCall(i int, result1 error) {
	fake.registerSignerMutex.Lock()
	defer fake.registerSignerMutex.Unlock()
	fake.RegisterSignerStub = nil
	if fake.registerSignerReturnsOnCall == nil {
		fake.registerSignerReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.registerSignerReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *IdentityProvider) RegisterVerifier(arg1 view.Identity, arg2 driver.Verifier) error {
	fake.registerVerifierMutex.Lock()
	ret, specificReturn := fake.registerVerifierReturnsOnCall[len(fake.registerVerifierArgsForCall)]
	fake.registerVerifierArgsForCall = append(fake.registerVerifierArgsForCall, struct {
		arg1 view.Identity
		arg2 driver.Verifier
	}{arg1, arg2})
	stub := fake.RegisterVerifierStub
	fakeReturns := fake.registerVerifierReturns
	fake.recordInvocation("RegisterVerifier", []interface{}{arg1, arg2})
	fake.registerVerifierMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *IdentityProvider) RegisterVerifierCallCount() int {
	fake.registerVerifierMutex.RLock()
	defer fake.registerVerifierMutex.RUnlock()
	return len(fake.registerVerifierArgsForCall)
}

func (fake *IdentityProvider) RegisterVerifierCalls(stub func(view.Identity, driver.Verifier) error) {
	fake.registerVerifierMutex.Lock()
	defer fake.registerVerifierMutex.Unlock()
	fake.RegisterVerifierStub = stub
}

func (fake *IdentityProvider) RegisterVerifierArgsForCall(i int) (view.Identity, driver.Verifier) {
	fake.registerVerifierMutex.RLock()
	defer fake.registerVerifierMutex.RUnlock()
	argsForCall := fake.registerVerifierArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *IdentityProvider) RegisterVerifierReturns(result1 error) {
	fake.registerVerifierMutex.Lock()
	defer fake.registerVerifierMutex.Unlock()
	fake.RegisterVerifierStub = nil
	fake.registerVerifierReturns = struct {
		result1 error
	}{result1}
}

func (fake *IdentityProvider) RegisterVerifierReturnsOnCall(i int, result1 error) {
	fake.registerVerifierMutex.Lock()
	defer fake.registerVerifierMutex.Unlock()
	fake.RegisterVerifierStub = nil
	if fake.registerVerifierReturnsOnCall == nil {
		fake.registerVerifierReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.registerVerifierReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *IdentityProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.bindMutex.RLock()
	defer fake.bindMutex.RUnlock()
	fake.getAuditInfoMutex.RLock()
	defer fake.getAuditInfoMutex.RUnlock()
	fake.getEnrollmentIDMutex.RLock()
	defer fake.getEnrollmentIDMutex.RUnlock()
	fake.getRevocationHandlerMutex.RLock()
	defer fake.getRevocationHandlerMutex.RUnlock()
	fake.getSignerMutex.RLock()
	defer fake.getSignerMutex.RUnlock()
	fake.isMeMutex.RLock()
	defer fake.isMeMutex.RUnlock()
	fake.registerRecipientDataMutex.RLock()
	defer fake.registerRecipientDataMutex.RUnlock()
	fake.registerRecipientIdentityMutex.RLock()
	defer fake.registerRecipientIdentityMutex.RUnlock()
	fake.registerSignerMutex.RLock()
	defer fake.registerSignerMutex.RUnlock()
	fake.registerVerifierMutex.RLock()
	defer fake.registerVerifierMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *IdentityProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ driver.IdentityProvider = new(IdentityProvider)
