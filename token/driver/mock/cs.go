// Code generated by counterfeiter. DO NOT EDIT.
package mock

import (
	"sync"

	"github.com/hyperledger-labs/fabric-token-sdk/token/driver"
	"github.com/hyperledger-labs/fabric-token-sdk/token/token"
)

type CertificationService struct {
	CertifyStub        func(driver.CertifierWallet, []*token.ID, [][]byte, []byte) ([][]byte, error)
	certifyMutex       sync.RWMutex
	certifyArgsForCall []struct {
		arg1 driver.CertifierWallet
		arg2 []*token.ID
		arg3 [][]byte
		arg4 []byte
	}
	certifyReturns struct {
		result1 [][]byte
		result2 error
	}
	certifyReturnsOnCall map[int]struct {
		result1 [][]byte
		result2 error
	}
	NewCertificationRequestStub        func([]*token.ID) ([]byte, error)
	newCertificationRequestMutex       sync.RWMutex
	newCertificationRequestArgsForCall []struct {
		arg1 []*token.ID
	}
	newCertificationRequestReturns struct {
		result1 []byte
		result2 error
	}
	newCertificationRequestReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	VerifyCertificationsStub        func([]*token.ID, [][]byte) ([][]byte, error)
	verifyCertificationsMutex       sync.RWMutex
	verifyCertificationsArgsForCall []struct {
		arg1 []*token.ID
		arg2 [][]byte
	}
	verifyCertificationsReturns struct {
		result1 [][]byte
		result2 error
	}
	verifyCertificationsReturnsOnCall map[int]struct {
		result1 [][]byte
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *CertificationService) Certify(arg1 driver.CertifierWallet, arg2 []*token.ID, arg3 [][]byte, arg4 []byte) ([][]byte, error) {
	var arg2Copy []*token.ID
	if arg2 != nil {
		arg2Copy = make([]*token.ID, len(arg2))
		copy(arg2Copy, arg2)
	}
	var arg3Copy [][]byte
	if arg3 != nil {
		arg3Copy = make([][]byte, len(arg3))
		copy(arg3Copy, arg3)
	}
	var arg4Copy []byte
	if arg4 != nil {
		arg4Copy = make([]byte, len(arg4))
		copy(arg4Copy, arg4)
	}
	fake.certifyMutex.Lock()
	ret, specificReturn := fake.certifyReturnsOnCall[len(fake.certifyArgsForCall)]
	fake.certifyArgsForCall = append(fake.certifyArgsForCall, struct {
		arg1 driver.CertifierWallet
		arg2 []*token.ID
		arg3 [][]byte
		arg4 []byte
	}{arg1, arg2Copy, arg3Copy, arg4Copy})
	stub := fake.CertifyStub
	fakeReturns := fake.certifyReturns
	fake.recordInvocation("Certify", []interface{}{arg1, arg2Copy, arg3Copy, arg4Copy})
	fake.certifyMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *CertificationService) CertifyCallCount() int {
	fake.certifyMutex.RLock()
	defer fake.certifyMutex.RUnlock()
	return len(fake.certifyArgsForCall)
}

func (fake *CertificationService) CertifyCalls(stub func(driver.CertifierWallet, []*token.ID, [][]byte, []byte) ([][]byte, error)) {
	fake.certifyMutex.Lock()
	defer fake.certifyMutex.Unlock()
	fake.CertifyStub = stub
}

func (fake *CertificationService) CertifyArgsForCall(i int) (driver.CertifierWallet, []*token.ID, [][]byte, []byte) {
	fake.certifyMutex.RLock()
	defer fake.certifyMutex.RUnlock()
	argsForCall := fake.certifyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *CertificationService) CertifyReturns(result1 [][]byte, result2 error) {
	fake.certifyMutex.Lock()
	defer fake.certifyMutex.Unlock()
	fake.CertifyStub = nil
	fake.certifyReturns = struct {
		result1 [][]byte
		result2 error
	}{result1, result2}
}

func (fake *CertificationService) CertifyReturnsOnCall(i int, result1 [][]byte, result2 error) {
	fake.certifyMutex.Lock()
	defer fake.certifyMutex.Unlock()
	fake.CertifyStub = nil
	if fake.certifyReturnsOnCall == nil {
		fake.certifyReturnsOnCall = make(map[int]struct {
			result1 [][]byte
			result2 error
		})
	}
	fake.certifyReturnsOnCall[i] = struct {
		result1 [][]byte
		result2 error
	}{result1, result2}
}

func (fake *CertificationService) NewCertificationRequest(arg1 []*token.ID) ([]byte, error) {
	var arg1Copy []*token.ID
	if arg1 != nil {
		arg1Copy = make([]*token.ID, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.newCertificationRequestMutex.Lock()
	ret, specificReturn := fake.newCertificationRequestReturnsOnCall[len(fake.newCertificationRequestArgsForCall)]
	fake.newCertificationRequestArgsForCall = append(fake.newCertificationRequestArgsForCall, struct {
		arg1 []*token.ID
	}{arg1Copy})
	stub := fake.NewCertificationRequestStub
	fakeReturns := fake.newCertificationRequestReturns
	fake.recordInvocation("NewCertificationRequest", []interface{}{arg1Copy})
	fake.newCertificationRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *CertificationService) NewCertificationRequestCallCount() int {
	fake.newCertificationRequestMutex.RLock()
	defer fake.newCertificationRequestMutex.RUnlock()
	return len(fake.newCertificationRequestArgsForCall)
}

func (fake *CertificationService) NewCertificationRequestCalls(stub func([]*token.ID) ([]byte, error)) {
	fake.newCertificationRequestMutex.Lock()
	defer fake.newCertificationRequestMutex.Unlock()
	fake.NewCertificationRequestStub = stub
}

func (fake *CertificationService) NewCertificationRequestArgsForCall(i int) []*token.ID {
	fake.newCertificationRequestMutex.RLock()
	defer fake.newCertificationRequestMutex.RUnlock()
	argsForCall := fake.newCertificationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *CertificationService) NewCertificationRequestReturns(result1 []byte, result2 error) {
	fake.newCertificationRequestMutex.Lock()
	defer fake.newCertificationRequestMutex.Unlock()
	fake.NewCertificationRequestStub = nil
	fake.newCertificationRequestReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *CertificationService) NewCertificationRequestReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.newCertificationRequestMutex.Lock()
	defer fake.newCertificationRequestMutex.Unlock()
	fake.NewCertificationRequestStub = nil
	if fake.newCertificationRequestReturnsOnCall == nil {
		fake.newCertificationRequestReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.newCertificationRequestReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *CertificationService) VerifyCertifications(arg1 []*token.ID, arg2 [][]byte) ([][]byte, error) {
	var arg1Copy []*token.ID
	if arg1 != nil {
		arg1Copy = make([]*token.ID, len(arg1))
		copy(arg1Copy, arg1)
	}
	var arg2Copy [][]byte
	if arg2 != nil {
		arg2Copy = make([][]byte, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.verifyCertificationsMutex.Lock()
	ret, specificReturn := fake.verifyCertificationsReturnsOnCall[len(fake.verifyCertificationsArgsForCall)]
	fake.verifyCertificationsArgsForCall = append(fake.verifyCertificationsArgsForCall, struct {
		arg1 []*token.ID
		arg2 [][]byte
	}{arg1Copy, arg2Copy})
	stub := fake.VerifyCertificationsStub
	fakeReturns := fake.verifyCertificationsReturns
	fake.recordInvocation("VerifyCertifications", []interface{}{arg1Copy, arg2Copy})
	fake.verifyCertificationsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *CertificationService) VerifyCertificationsCallCount() int {
	fake.verifyCertificationsMutex.RLock()
	defer fake.verifyCertificationsMutex.RUnlock()
	return len(fake.verifyCertificationsArgsForCall)
}

func (fake *CertificationService) VerifyCertificationsCalls(stub func([]*token.ID, [][]byte) ([][]byte, error)) {
	fake.verifyCertificationsMutex.Lock()
	defer fake.verifyCertificationsMutex.Unlock()
	fake.VerifyCertificationsStub = stub
}

func (fake *CertificationService) VerifyCertificationsArgsForCall(i int) ([]*token.ID, [][]byte) {
	fake.verifyCertificationsMutex.RLock()
	defer fake.verifyCertificationsMutex.RUnlock()
	argsForCall := fake.verifyCertificationsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *CertificationService) VerifyCertificationsReturns(result1 [][]byte, result2 error) {
	fake.verifyCertificationsMutex.Lock()
	defer fake.verifyCertificationsMutex.Unlock()
	fake.VerifyCertificationsStub = nil
	fake.verifyCertificationsReturns = struct {
		result1 [][]byte
		result2 error
	}{result1, result2}
}

func (fake *CertificationService) VerifyCertificationsReturnsOnCall(i int, result1 [][]byte, result2 error) {
	fake.verifyCertificationsMutex.Lock()
	defer fake.verifyCertificationsMutex.Unlock()
	fake.VerifyCertificationsStub = nil
	if fake.verifyCertificationsReturnsOnCall == nil {
		fake.verifyCertificationsReturnsOnCall = make(map[int]struct {
			result1 [][]byte
			result2 error
		})
	}
	fake.verifyCertificationsReturnsOnCall[i] = struct {
		result1 [][]byte
		result2 error
	}{result1, result2}
}

func (fake *CertificationService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.certifyMutex.RLock()
	defer fake.certifyMutex.RUnlock()
	fake.newCertificationRequestMutex.RLock()
	defer fake.newCertificationRequestMutex.RUnlock()
	fake.verifyCertificationsMutex.RLock()
	defer fake.verifyCertificationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *CertificationService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ driver.CertificationService = new(CertificationService)
