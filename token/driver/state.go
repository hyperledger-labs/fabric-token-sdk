/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package driver

import (
	"time"

	"github.com/hyperledger-labs/fabric-token-sdk/token/token"
)

// ServiceProvider is used to return instances of a given type
type ServiceProvider interface {
	// GetService returns an instance of the given type
	GetService(v interface{}) (interface{}, error)
}

// StateQueryExecutor models a prover of token related states
type StateQueryExecutor interface {
	// Exist returns a proof that the passed token exists in the network this query executor targets
	Exist(tokenID *token.ID) ([]byte, error)
	// DoesNotExist returns a proof that the passed token, originated in the given network, does not exist
	// in the network this query executor targets
	DoesNotExist(tokenID *token.ID, origin string, deadline time.Time) ([]byte, error)
	// ExistsWithMetadata returns a proof that a token with metadata including the passed token ID and origin network exists
	// in the network this query executor targets
	ExistsWithMetadata(tokenID *token.ID, origin string) ([]byte, error)
}

// StateVerifier is used to verify proofs related to the state of tokens in a target network
type StateVerifier interface {
	// VerifyProofExistence verifies that a proof of existence of the passed token in the target network is valid
	VerifyProofExistence(proof []byte, tokenID *token.ID, metadata []byte) error
	// VerifyProofNonExistence verifies that a proof of non-existence of the given token,
	// originated in the given network, in the target network is valid
	VerifyProofNonExistence(proof []byte, tokenID *token.ID, origin string, deadline time.Time) error
	// VerifyProofTokenWithMetadataExistence verifies that a proof of existence of a token
	// with metadata including the given token ID and origin network, in the target network is valid
	VerifyProofTokenWithMetadataExistence(proof []byte, tokenID *token.ID, origin string) error
}

// StateServiceProvider manages state-related services
type StateServiceProvider interface {
	// QueryExecutor returns an instance of a query executor to requests proofs from the network identified by the passed url
	QueryExecutor(url string) (StateQueryExecutor, error)
	// Verifier returns an instance of a verifier of proofs generated by the network identified by the passed url
	Verifier(url string) (StateVerifier, error)
	// TODO: comment
	URLToTMSID(url string) (TMSID, error)
}

// SSPDriver models a driver fatcory for state-related services
type SSPDriver interface {
	// New returns an instance of a state service provider
	New(sp ServiceProvider) (StateServiceProvider, error)
}
