//
//Copyright IBM Corp. All Rights Reserved.
//
//SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.28.1
// source: noghpp.proto

package pp

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	math "github.com/hyperledger-labs/fabric-token-sdk/token/core/zkatdlog/nogh/protos-go/math"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Identity struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Raw           []byte                 `protobuf:"bytes,1,opt,name=raw,proto3" json:"raw,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Identity) Reset() {
	*x = Identity{}
	mi := &file_noghpp_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Identity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity) ProtoMessage() {}

func (x *Identity) ProtoReflect() protoreflect.Message {
	mi := &file_noghpp_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity.ProtoReflect.Descriptor instead.
func (*Identity) Descriptor() ([]byte, []int) {
	return file_noghpp_proto_rawDescGZIP(), []int{0}
}

func (x *Identity) GetRaw() []byte {
	if x != nil {
		return x.Raw
	}
	return nil
}

type IdemixIssuerPublicKey struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PublicKey     []byte                 `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	CurverId      *math.CurveID          `protobuf:"bytes,2,opt,name=curver_id,json=curverId,proto3" json:"curver_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IdemixIssuerPublicKey) Reset() {
	*x = IdemixIssuerPublicKey{}
	mi := &file_noghpp_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IdemixIssuerPublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdemixIssuerPublicKey) ProtoMessage() {}

func (x *IdemixIssuerPublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_noghpp_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdemixIssuerPublicKey.ProtoReflect.Descriptor instead.
func (*IdemixIssuerPublicKey) Descriptor() ([]byte, []int) {
	return file_noghpp_proto_rawDescGZIP(), []int{1}
}

func (x *IdemixIssuerPublicKey) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *IdemixIssuerPublicKey) GetCurverId() *math.CurveID {
	if x != nil {
		return x.CurverId
	}
	return nil
}

type RangeProofParams struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	LeftGenerators  []*math.G1             `protobuf:"bytes,1,rep,name=left_generators,json=leftGenerators,proto3" json:"left_generators,omitempty"`
	RightGenerators []*math.G1             `protobuf:"bytes,2,rep,name=right_generators,json=rightGenerators,proto3" json:"right_generators,omitempty"`
	P               *math.G1               `protobuf:"bytes,3,opt,name=P,proto3" json:"P,omitempty"`
	Q               *math.G1               `protobuf:"bytes,4,opt,name=Q,proto3" json:"Q,omitempty"`
	BitLength       uint64                 `protobuf:"varint,5,opt,name=bit_length,json=bitLength,proto3" json:"bit_length,omitempty"`
	NumberOfRounds  uint64                 `protobuf:"varint,6,opt,name=number_of_rounds,json=numberOfRounds,proto3" json:"number_of_rounds,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *RangeProofParams) Reset() {
	*x = RangeProofParams{}
	mi := &file_noghpp_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RangeProofParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangeProofParams) ProtoMessage() {}

func (x *RangeProofParams) ProtoReflect() protoreflect.Message {
	mi := &file_noghpp_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangeProofParams.ProtoReflect.Descriptor instead.
func (*RangeProofParams) Descriptor() ([]byte, []int) {
	return file_noghpp_proto_rawDescGZIP(), []int{2}
}

func (x *RangeProofParams) GetLeftGenerators() []*math.G1 {
	if x != nil {
		return x.LeftGenerators
	}
	return nil
}

func (x *RangeProofParams) GetRightGenerators() []*math.G1 {
	if x != nil {
		return x.RightGenerators
	}
	return nil
}

func (x *RangeProofParams) GetP() *math.G1 {
	if x != nil {
		return x.P
	}
	return nil
}

func (x *RangeProofParams) GetQ() *math.G1 {
	if x != nil {
		return x.Q
	}
	return nil
}

func (x *RangeProofParams) GetBitLength() uint64 {
	if x != nil {
		return x.BitLength
	}
	return 0
}

func (x *RangeProofParams) GetNumberOfRounds() uint64 {
	if x != nil {
		return x.NumberOfRounds
	}
	return 0
}

// PublicParameters describes typed public parameters
type PublicParameters struct {
	state                  protoimpl.MessageState   `protogen:"open.v1"`
	TokenDriverName        string                   `protobuf:"bytes,1,opt,name=token_driver_name,json=tokenDriverName,proto3" json:"token_driver_name,omitempty"`                        // the identifier of the token driver
	TokenDriverVersion     uint64                   `protobuf:"varint,2,opt,name=token_driver_version,json=tokenDriverVersion,proto3" json:"token_driver_version,omitempty"`              // the version of the token driver
	CurveId                *math.CurveID            `protobuf:"bytes,3,opt,name=curve_id,json=curveId,proto3" json:"curve_id,omitempty"`                                                  // the pairing-friendly elliptic curve used for everything but Idemix.
	PedersenGenerators     []*math.G1               `protobuf:"bytes,4,rep,name=pedersen_generators,json=pedersenGenerators,proto3" json:"pedersen_generators,omitempty"`                 // contains the public parameters for the Pedersen commitment scheme.
	RangeProofParams       *RangeProofParams        `protobuf:"bytes,5,opt,name=range_proof_params,json=rangeProofParams,proto3" json:"range_proof_params,omitempty"`                     // contains the public parameters for the range proof scheme.
	IdemixIssuerPublicKeys []*IdemixIssuerPublicKey `protobuf:"bytes,6,rep,name=idemix_issuer_public_keys,json=idemixIssuerPublicKeys,proto3" json:"idemix_issuer_public_keys,omitempty"` // contains the idemix issuer public keys. Wallets should prefer the use of keys valid under the public key whose index in the array is the smallest.
	Auditors               []*Identity              `protobuf:"bytes,7,rep,name=auditors,proto3" json:"auditors,omitempty"`                                                               // is the public key of the auditor.
	Issuers                []*Identity              `protobuf:"bytes,8,rep,name=issuers,proto3" json:"issuers,omitempty"`                                                                 // is a list of public keys of the entities that can issue tokens.
	MaxToken               uint64                   `protobuf:"varint,9,opt,name=max_token,json=maxToken,proto3" json:"max_token,omitempty"`                                              // is the maximum quantity a token can hold
	QuantityPrecision      uint64                   `protobuf:"varint,10,opt,name=quantity_precision,json=quantityPrecision,proto3" json:"quantity_precision,omitempty"`                  // is the precision used to represent quantities
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *PublicParameters) Reset() {
	*x = PublicParameters{}
	mi := &file_noghpp_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublicParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicParameters) ProtoMessage() {}

func (x *PublicParameters) ProtoReflect() protoreflect.Message {
	mi := &file_noghpp_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicParameters.ProtoReflect.Descriptor instead.
func (*PublicParameters) Descriptor() ([]byte, []int) {
	return file_noghpp_proto_rawDescGZIP(), []int{3}
}

func (x *PublicParameters) GetTokenDriverName() string {
	if x != nil {
		return x.TokenDriverName
	}
	return ""
}

func (x *PublicParameters) GetTokenDriverVersion() uint64 {
	if x != nil {
		return x.TokenDriverVersion
	}
	return 0
}

func (x *PublicParameters) GetCurveId() *math.CurveID {
	if x != nil {
		return x.CurveId
	}
	return nil
}

func (x *PublicParameters) GetPedersenGenerators() []*math.G1 {
	if x != nil {
		return x.PedersenGenerators
	}
	return nil
}

func (x *PublicParameters) GetRangeProofParams() *RangeProofParams {
	if x != nil {
		return x.RangeProofParams
	}
	return nil
}

func (x *PublicParameters) GetIdemixIssuerPublicKeys() []*IdemixIssuerPublicKey {
	if x != nil {
		return x.IdemixIssuerPublicKeys
	}
	return nil
}

func (x *PublicParameters) GetAuditors() []*Identity {
	if x != nil {
		return x.Auditors
	}
	return nil
}

func (x *PublicParameters) GetIssuers() []*Identity {
	if x != nil {
		return x.Issuers
	}
	return nil
}

func (x *PublicParameters) GetMaxToken() uint64 {
	if x != nil {
		return x.MaxToken
	}
	return 0
}

func (x *PublicParameters) GetQuantityPrecision() uint64 {
	if x != nil {
		return x.QuantityPrecision
	}
	return 0
}

var File_noghpp_proto protoreflect.FileDescriptor

const file_noghpp_proto_rawDesc = "" +
	"\n" +
	"\fnoghpp.proto\x12\x04nogh\x1a\x0enoghmath.proto\"\x1c\n" +
	"\bIdentity\x12\x10\n" +
	"\x03raw\x18\x01 \x01(\fR\x03raw\"b\n" +
	"\x15IdemixIssuerPublicKey\x12\x1d\n" +
	"\n" +
	"public_key\x18\x01 \x01(\fR\tpublicKey\x12*\n" +
	"\tcurver_id\x18\x02 \x01(\v2\r.nogh.CurveIDR\bcurverId\"\xf3\x01\n" +
	"\x10RangeProofParams\x121\n" +
	"\x0fleft_generators\x18\x01 \x03(\v2\b.nogh.G1R\x0eleftGenerators\x123\n" +
	"\x10right_generators\x18\x02 \x03(\v2\b.nogh.G1R\x0frightGenerators\x12\x16\n" +
	"\x01P\x18\x03 \x01(\v2\b.nogh.G1R\x01P\x12\x16\n" +
	"\x01Q\x18\x04 \x01(\v2\b.nogh.G1R\x01Q\x12\x1d\n" +
	"\n" +
	"bit_length\x18\x05 \x01(\x04R\tbitLength\x12(\n" +
	"\x10number_of_rounds\x18\x06 \x01(\x04R\x0enumberOfRounds\"\x95\x04\n" +
	"\x10PublicParameters\x12*\n" +
	"\x11token_driver_name\x18\x01 \x01(\tR\x0ftokenDriverName\x120\n" +
	"\x14token_driver_version\x18\x02 \x01(\x04R\x12tokenDriverVersion\x12(\n" +
	"\bcurve_id\x18\x03 \x01(\v2\r.nogh.CurveIDR\acurveId\x129\n" +
	"\x13pedersen_generators\x18\x04 \x03(\v2\b.nogh.G1R\x12pedersenGenerators\x12D\n" +
	"\x12range_proof_params\x18\x05 \x01(\v2\x16.nogh.RangeProofParamsR\x10rangeProofParams\x12V\n" +
	"\x19idemix_issuer_public_keys\x18\x06 \x03(\v2\x1b.nogh.IdemixIssuerPublicKeyR\x16idemixIssuerPublicKeys\x12*\n" +
	"\bauditors\x18\a \x03(\v2\x0e.nogh.IdentityR\bauditors\x12(\n" +
	"\aissuers\x18\b \x03(\v2\x0e.nogh.IdentityR\aissuers\x12\x1b\n" +
	"\tmax_token\x18\t \x01(\x04R\bmaxToken\x12-\n" +
	"\x12quantity_precision\x18\n" +
	" \x01(\x04R\x11quantityPrecisionBTZRgithub.com/hyperledger-labs/fabric-token-sdk/token/core/zkatdlog/nogh/protos-go/ppb\x06proto3"

var (
	file_noghpp_proto_rawDescOnce sync.Once
	file_noghpp_proto_rawDescData []byte
)

func file_noghpp_proto_rawDescGZIP() []byte {
	file_noghpp_proto_rawDescOnce.Do(func() {
		file_noghpp_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_noghpp_proto_rawDesc), len(file_noghpp_proto_rawDesc)))
	})
	return file_noghpp_proto_rawDescData
}

var file_noghpp_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_noghpp_proto_goTypes = []any{
	(*Identity)(nil),              // 0: nogh.Identity
	(*IdemixIssuerPublicKey)(nil), // 1: nogh.IdemixIssuerPublicKey
	(*RangeProofParams)(nil),      // 2: nogh.RangeProofParams
	(*PublicParameters)(nil),      // 3: nogh.PublicParameters
	(*math.CurveID)(nil),          // 4: nogh.CurveID
	(*math.G1)(nil),               // 5: nogh.G1
}
var file_noghpp_proto_depIdxs = []int32{
	4,  // 0: nogh.IdemixIssuerPublicKey.curver_id:type_name -> nogh.CurveID
	5,  // 1: nogh.RangeProofParams.left_generators:type_name -> nogh.G1
	5,  // 2: nogh.RangeProofParams.right_generators:type_name -> nogh.G1
	5,  // 3: nogh.RangeProofParams.P:type_name -> nogh.G1
	5,  // 4: nogh.RangeProofParams.Q:type_name -> nogh.G1
	4,  // 5: nogh.PublicParameters.curve_id:type_name -> nogh.CurveID
	5,  // 6: nogh.PublicParameters.pedersen_generators:type_name -> nogh.G1
	2,  // 7: nogh.PublicParameters.range_proof_params:type_name -> nogh.RangeProofParams
	1,  // 8: nogh.PublicParameters.idemix_issuer_public_keys:type_name -> nogh.IdemixIssuerPublicKey
	0,  // 9: nogh.PublicParameters.auditors:type_name -> nogh.Identity
	0,  // 10: nogh.PublicParameters.issuers:type_name -> nogh.Identity
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_noghpp_proto_init() }
func file_noghpp_proto_init() {
	if File_noghpp_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_noghpp_proto_rawDesc), len(file_noghpp_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_noghpp_proto_goTypes,
		DependencyIndexes: file_noghpp_proto_depIdxs,
		MessageInfos:      file_noghpp_proto_msgTypes,
	}.Build()
	File_noghpp_proto = out.File
	file_noghpp_proto_goTypes = nil
	file_noghpp_proto_depIdxs = nil
}
