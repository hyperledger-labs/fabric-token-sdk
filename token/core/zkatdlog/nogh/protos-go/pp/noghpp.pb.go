//
//Copyright IBM Corp. All Rights Reserved.
//
//SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.28.1
// source: noghpp.proto

package pp

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type G1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Raw []byte `protobuf:"bytes,1,opt,name=raw,proto3" json:"raw,omitempty"`
}

func (x *G1) Reset() {
	*x = G1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_noghpp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *G1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*G1) ProtoMessage() {}

func (x *G1) ProtoReflect() protoreflect.Message {
	mi := &file_noghpp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use G1.ProtoReflect.Descriptor instead.
func (*G1) Descriptor() ([]byte, []int) {
	return file_noghpp_proto_rawDescGZIP(), []int{0}
}

func (x *G1) GetRaw() []byte {
	if x != nil {
		return x.Raw
	}
	return nil
}

type CurveID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CurveID) Reset() {
	*x = CurveID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_noghpp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurveID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurveID) ProtoMessage() {}

func (x *CurveID) ProtoReflect() protoreflect.Message {
	mi := &file_noghpp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurveID.ProtoReflect.Descriptor instead.
func (*CurveID) Descriptor() ([]byte, []int) {
	return file_noghpp_proto_rawDescGZIP(), []int{1}
}

func (x *CurveID) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type Identity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Raw []byte `protobuf:"bytes,1,opt,name=raw,proto3" json:"raw,omitempty"`
}

func (x *Identity) Reset() {
	*x = Identity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_noghpp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity) ProtoMessage() {}

func (x *Identity) ProtoReflect() protoreflect.Message {
	mi := &file_noghpp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity.ProtoReflect.Descriptor instead.
func (*Identity) Descriptor() ([]byte, []int) {
	return file_noghpp_proto_rawDescGZIP(), []int{2}
}

func (x *Identity) GetRaw() []byte {
	if x != nil {
		return x.Raw
	}
	return nil
}

type IdemixIssuerPublicKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKey []byte   `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	CurverId  *CurveID `protobuf:"bytes,2,opt,name=curver_id,json=curverId,proto3" json:"curver_id,omitempty"`
}

func (x *IdemixIssuerPublicKey) Reset() {
	*x = IdemixIssuerPublicKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_noghpp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdemixIssuerPublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdemixIssuerPublicKey) ProtoMessage() {}

func (x *IdemixIssuerPublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_noghpp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdemixIssuerPublicKey.ProtoReflect.Descriptor instead.
func (*IdemixIssuerPublicKey) Descriptor() ([]byte, []int) {
	return file_noghpp_proto_rawDescGZIP(), []int{3}
}

func (x *IdemixIssuerPublicKey) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *IdemixIssuerPublicKey) GetCurverId() *CurveID {
	if x != nil {
		return x.CurverId
	}
	return nil
}

type RangeProofParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeftGenerators  []*G1  `protobuf:"bytes,1,rep,name=left_generators,json=leftGenerators,proto3" json:"left_generators,omitempty"`
	RightGenerators []*G1  `protobuf:"bytes,2,rep,name=right_generators,json=rightGenerators,proto3" json:"right_generators,omitempty"`
	P               *G1    `protobuf:"bytes,3,opt,name=P,proto3" json:"P,omitempty"`
	Q               *G1    `protobuf:"bytes,4,opt,name=Q,proto3" json:"Q,omitempty"`
	BitLength       uint64 `protobuf:"varint,5,opt,name=bit_length,json=bitLength,proto3" json:"bit_length,omitempty"`
	NumberOfRounds  uint64 `protobuf:"varint,6,opt,name=number_of_rounds,json=numberOfRounds,proto3" json:"number_of_rounds,omitempty"`
}

func (x *RangeProofParams) Reset() {
	*x = RangeProofParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_noghpp_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RangeProofParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangeProofParams) ProtoMessage() {}

func (x *RangeProofParams) ProtoReflect() protoreflect.Message {
	mi := &file_noghpp_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangeProofParams.ProtoReflect.Descriptor instead.
func (*RangeProofParams) Descriptor() ([]byte, []int) {
	return file_noghpp_proto_rawDescGZIP(), []int{4}
}

func (x *RangeProofParams) GetLeftGenerators() []*G1 {
	if x != nil {
		return x.LeftGenerators
	}
	return nil
}

func (x *RangeProofParams) GetRightGenerators() []*G1 {
	if x != nil {
		return x.RightGenerators
	}
	return nil
}

func (x *RangeProofParams) GetP() *G1 {
	if x != nil {
		return x.P
	}
	return nil
}

func (x *RangeProofParams) GetQ() *G1 {
	if x != nil {
		return x.Q
	}
	return nil
}

func (x *RangeProofParams) GetBitLength() uint64 {
	if x != nil {
		return x.BitLength
	}
	return 0
}

func (x *RangeProofParams) GetNumberOfRounds() uint64 {
	if x != nil {
		return x.NumberOfRounds
	}
	return 0
}

// PublicParameters describes typed public parameters
type PublicParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier             string                   `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`                                                           // the identifier of the public parameters
	Version                string                   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`                                                                 // the version of these public params
	CurveId                *CurveID                 `protobuf:"bytes,3,opt,name=curve_id,json=curveId,proto3" json:"curve_id,omitempty"`                                                  // the pairing-friendly elliptic curve used for everything but Idemix.
	PedersenGenerators     []*G1                    `protobuf:"bytes,4,rep,name=pedersen_generators,json=pedersenGenerators,proto3" json:"pedersen_generators,omitempty"`                 // contains the public parameters for the Pedersen commitment scheme.
	RangeProofParams       *RangeProofParams        `protobuf:"bytes,5,opt,name=range_proof_params,json=rangeProofParams,proto3" json:"range_proof_params,omitempty"`                     // contains the public parameters for the range proof scheme.
	IdemixIssuerPublicKeys []*IdemixIssuerPublicKey `protobuf:"bytes,6,rep,name=idemix_issuer_public_keys,json=idemixIssuerPublicKeys,proto3" json:"idemix_issuer_public_keys,omitempty"` // contains the idemix issuer public keys. Wallets should prefer the use of keys valid under the public key whose index in the array is the smallest.
	Auditor                *Identity                `protobuf:"bytes,7,opt,name=auditor,proto3" json:"auditor,omitempty"`                                                                 // is the public key of the auditor.
	Issuers                []*Identity              `protobuf:"bytes,8,rep,name=issuers,proto3" json:"issuers,omitempty"`                                                                 // is a list of public keys of the entities that can issue tokens.
	MaxToken               uint64                   `protobuf:"varint,9,opt,name=max_token,json=maxToken,proto3" json:"max_token,omitempty"`                                              // is the maximum quantity a token can hold
	QuantityPrecision      uint64                   `protobuf:"varint,10,opt,name=quantity_precision,json=quantityPrecision,proto3" json:"quantity_precision,omitempty"`                  // is the precision used to represent quantities
}

func (x *PublicParameters) Reset() {
	*x = PublicParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_noghpp_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicParameters) ProtoMessage() {}

func (x *PublicParameters) ProtoReflect() protoreflect.Message {
	mi := &file_noghpp_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicParameters.ProtoReflect.Descriptor instead.
func (*PublicParameters) Descriptor() ([]byte, []int) {
	return file_noghpp_proto_rawDescGZIP(), []int{5}
}

func (x *PublicParameters) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *PublicParameters) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *PublicParameters) GetCurveId() *CurveID {
	if x != nil {
		return x.CurveId
	}
	return nil
}

func (x *PublicParameters) GetPedersenGenerators() []*G1 {
	if x != nil {
		return x.PedersenGenerators
	}
	return nil
}

func (x *PublicParameters) GetRangeProofParams() *RangeProofParams {
	if x != nil {
		return x.RangeProofParams
	}
	return nil
}

func (x *PublicParameters) GetIdemixIssuerPublicKeys() []*IdemixIssuerPublicKey {
	if x != nil {
		return x.IdemixIssuerPublicKeys
	}
	return nil
}

func (x *PublicParameters) GetAuditor() *Identity {
	if x != nil {
		return x.Auditor
	}
	return nil
}

func (x *PublicParameters) GetIssuers() []*Identity {
	if x != nil {
		return x.Issuers
	}
	return nil
}

func (x *PublicParameters) GetMaxToken() uint64 {
	if x != nil {
		return x.MaxToken
	}
	return 0
}

func (x *PublicParameters) GetQuantityPrecision() uint64 {
	if x != nil {
		return x.QuantityPrecision
	}
	return 0
}

var File_noghpp_proto protoreflect.FileDescriptor

var file_noghpp_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x6e, 0x6f, 0x67, 0x68, 0x70, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x6e, 0x6f, 0x67, 0x68, 0x70, 0x70, 0x22, 0x16, 0x0a, 0x02, 0x47, 0x31, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x61, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x72, 0x61, 0x77, 0x22, 0x19,
	0x0a, 0x07, 0x43, 0x75, 0x72, 0x76, 0x65, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1c, 0x0a, 0x08, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x03, 0x72, 0x61, 0x77, 0x22, 0x64, 0x0a, 0x15, 0x49, 0x64, 0x65, 0x6d, 0x69,
	0x78, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12,
	0x2c, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6e, 0x6f, 0x67, 0x68, 0x70, 0x70, 0x2e, 0x43, 0x75, 0x72, 0x76,
	0x65, 0x49, 0x44, 0x52, 0x08, 0x63, 0x75, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0xfb, 0x01,
	0x0a, 0x10, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x33, 0x0a, 0x0f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x6e, 0x6f,
	0x67, 0x68, 0x70, 0x70, 0x2e, 0x47, 0x31, 0x52, 0x0e, 0x6c, 0x65, 0x66, 0x74, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x35, 0x0a, 0x10, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x6e, 0x6f, 0x67, 0x68, 0x70, 0x70, 0x2e, 0x47, 0x31, 0x52, 0x0f, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x18,
	0x0a, 0x01, 0x50, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x6e, 0x6f, 0x67, 0x68,
	0x70, 0x70, 0x2e, 0x47, 0x31, 0x52, 0x01, 0x50, 0x12, 0x18, 0x0a, 0x01, 0x51, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x6e, 0x6f, 0x67, 0x68, 0x70, 0x70, 0x2e, 0x47, 0x31, 0x52,
	0x01, 0x51, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x69, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x66, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x22, 0xfb, 0x03, 0x0a, 0x10,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x08, 0x63, 0x75,
	0x72, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6e,
	0x6f, 0x67, 0x68, 0x70, 0x70, 0x2e, 0x43, 0x75, 0x72, 0x76, 0x65, 0x49, 0x44, 0x52, 0x07, 0x63,
	0x75, 0x72, 0x76, 0x65, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x13, 0x70, 0x65, 0x64, 0x65, 0x72, 0x73,
	0x65, 0x6e, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x6e, 0x6f, 0x67, 0x68, 0x70, 0x70, 0x2e, 0x47, 0x31, 0x52,
	0x12, 0x70, 0x65, 0x64, 0x65, 0x72, 0x73, 0x65, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x12, 0x46, 0x0a, 0x12, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x6f, 0x66, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6e, 0x6f, 0x67, 0x68, 0x70, 0x70, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x10, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x58, 0x0a, 0x19, 0x69,
	0x64, 0x65, 0x6d, 0x69, 0x78, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x5f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6e, 0x6f, 0x67, 0x68, 0x70, 0x70, 0x2e, 0x49, 0x64, 0x65, 0x6d, 0x69, 0x78, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x16, 0x69,
	0x64, 0x65, 0x6d, 0x69, 0x78, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x2a, 0x0a, 0x07, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6e, 0x6f, 0x67, 0x68, 0x70, 0x70, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x07, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x12, 0x2a, 0x0a, 0x07, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6e, 0x6f, 0x67, 0x68, 0x70, 0x70, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x07, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x6d, 0x61, 0x78, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x11, 0x5a, 0x0f, 0x2e, 0x2e, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x70, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_noghpp_proto_rawDescOnce sync.Once
	file_noghpp_proto_rawDescData = file_noghpp_proto_rawDesc
)

func file_noghpp_proto_rawDescGZIP() []byte {
	file_noghpp_proto_rawDescOnce.Do(func() {
		file_noghpp_proto_rawDescData = protoimpl.X.CompressGZIP(file_noghpp_proto_rawDescData)
	})
	return file_noghpp_proto_rawDescData
}

var file_noghpp_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_noghpp_proto_goTypes = []interface{}{
	(*G1)(nil),                    // 0: noghpp.G1
	(*CurveID)(nil),               // 1: noghpp.CurveID
	(*Identity)(nil),              // 2: noghpp.Identity
	(*IdemixIssuerPublicKey)(nil), // 3: noghpp.IdemixIssuerPublicKey
	(*RangeProofParams)(nil),      // 4: noghpp.RangeProofParams
	(*PublicParameters)(nil),      // 5: noghpp.PublicParameters
}
var file_noghpp_proto_depIdxs = []int32{
	1,  // 0: noghpp.IdemixIssuerPublicKey.curver_id:type_name -> noghpp.CurveID
	0,  // 1: noghpp.RangeProofParams.left_generators:type_name -> noghpp.G1
	0,  // 2: noghpp.RangeProofParams.right_generators:type_name -> noghpp.G1
	0,  // 3: noghpp.RangeProofParams.P:type_name -> noghpp.G1
	0,  // 4: noghpp.RangeProofParams.Q:type_name -> noghpp.G1
	1,  // 5: noghpp.PublicParameters.curve_id:type_name -> noghpp.CurveID
	0,  // 6: noghpp.PublicParameters.pedersen_generators:type_name -> noghpp.G1
	4,  // 7: noghpp.PublicParameters.range_proof_params:type_name -> noghpp.RangeProofParams
	3,  // 8: noghpp.PublicParameters.idemix_issuer_public_keys:type_name -> noghpp.IdemixIssuerPublicKey
	2,  // 9: noghpp.PublicParameters.auditor:type_name -> noghpp.Identity
	2,  // 10: noghpp.PublicParameters.issuers:type_name -> noghpp.Identity
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_noghpp_proto_init() }
func file_noghpp_proto_init() {
	if File_noghpp_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_noghpp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*G1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_noghpp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurveID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_noghpp_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_noghpp_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdemixIssuerPublicKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_noghpp_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RangeProofParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_noghpp_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_noghpp_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_noghpp_proto_goTypes,
		DependencyIndexes: file_noghpp_proto_depIdxs,
		MessageInfos:      file_noghpp_proto_msgTypes,
	}.Build()
	File_noghpp_proto = out.File
	file_noghpp_proto_rawDesc = nil
	file_noghpp_proto_goTypes = nil
	file_noghpp_proto_depIdxs = nil
}
