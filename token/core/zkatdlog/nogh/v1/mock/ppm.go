// Code generated by counterfeiter. DO NOT EDIT.
package mock

import (
	"sync"

	v1 "github.com/hyperledger-labs/fabric-token-sdk/token/core/zkatdlog/nogh/v1"
	"github.com/hyperledger-labs/fabric-token-sdk/token/core/zkatdlog/nogh/v1/setup"
	"github.com/hyperledger-labs/fabric-token-sdk/token/driver"
)

type PublicParametersManager struct {
	NewCertifierKeyPairStub        func() ([]byte, []byte, error)
	newCertifierKeyPairMutex       sync.RWMutex
	newCertifierKeyPairArgsForCall []struct {
	}
	newCertifierKeyPairReturns struct {
		result1 []byte
		result2 []byte
		result3 error
	}
	newCertifierKeyPairReturnsOnCall map[int]struct {
		result1 []byte
		result2 []byte
		result3 error
	}
	PublicParametersStub        func() driver.PublicParameters
	publicParametersMutex       sync.RWMutex
	publicParametersArgsForCall []struct {
	}
	publicParametersReturns struct {
		result1 driver.PublicParameters
	}
	publicParametersReturnsOnCall map[int]struct {
		result1 driver.PublicParameters
	}
	PublicParamsStub        func() *setup.PublicParams
	publicParamsMutex       sync.RWMutex
	publicParamsArgsForCall []struct {
	}
	publicParamsReturns struct {
		result1 *setup.PublicParams
	}
	publicParamsReturnsOnCall map[int]struct {
		result1 *setup.PublicParams
	}
	PublicParamsHashStub        func() driver.PPHash
	publicParamsHashMutex       sync.RWMutex
	publicParamsHashArgsForCall []struct {
	}
	publicParamsHashReturns struct {
		result1 driver.PPHash
	}
	publicParamsHashReturnsOnCall map[int]struct {
		result1 driver.PPHash
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *PublicParametersManager) NewCertifierKeyPair() ([]byte, []byte, error) {
	fake.newCertifierKeyPairMutex.Lock()
	ret, specificReturn := fake.newCertifierKeyPairReturnsOnCall[len(fake.newCertifierKeyPairArgsForCall)]
	fake.newCertifierKeyPairArgsForCall = append(fake.newCertifierKeyPairArgsForCall, struct {
	}{})
	stub := fake.NewCertifierKeyPairStub
	fakeReturns := fake.newCertifierKeyPairReturns
	fake.recordInvocation("NewCertifierKeyPair", []interface{}{})
	fake.newCertifierKeyPairMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *PublicParametersManager) NewCertifierKeyPairCallCount() int {
	fake.newCertifierKeyPairMutex.RLock()
	defer fake.newCertifierKeyPairMutex.RUnlock()
	return len(fake.newCertifierKeyPairArgsForCall)
}

func (fake *PublicParametersManager) NewCertifierKeyPairCalls(stub func() ([]byte, []byte, error)) {
	fake.newCertifierKeyPairMutex.Lock()
	defer fake.newCertifierKeyPairMutex.Unlock()
	fake.NewCertifierKeyPairStub = stub
}

func (fake *PublicParametersManager) NewCertifierKeyPairReturns(result1 []byte, result2 []byte, result3 error) {
	fake.newCertifierKeyPairMutex.Lock()
	defer fake.newCertifierKeyPairMutex.Unlock()
	fake.NewCertifierKeyPairStub = nil
	fake.newCertifierKeyPairReturns = struct {
		result1 []byte
		result2 []byte
		result3 error
	}{result1, result2, result3}
}

func (fake *PublicParametersManager) NewCertifierKeyPairReturnsOnCall(i int, result1 []byte, result2 []byte, result3 error) {
	fake.newCertifierKeyPairMutex.Lock()
	defer fake.newCertifierKeyPairMutex.Unlock()
	fake.NewCertifierKeyPairStub = nil
	if fake.newCertifierKeyPairReturnsOnCall == nil {
		fake.newCertifierKeyPairReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 []byte
			result3 error
		})
	}
	fake.newCertifierKeyPairReturnsOnCall[i] = struct {
		result1 []byte
		result2 []byte
		result3 error
	}{result1, result2, result3}
}

func (fake *PublicParametersManager) PublicParameters() driver.PublicParameters {
	fake.publicParametersMutex.Lock()
	ret, specificReturn := fake.publicParametersReturnsOnCall[len(fake.publicParametersArgsForCall)]
	fake.publicParametersArgsForCall = append(fake.publicParametersArgsForCall, struct {
	}{})
	stub := fake.PublicParametersStub
	fakeReturns := fake.publicParametersReturns
	fake.recordInvocation("PublicParameters", []interface{}{})
	fake.publicParametersMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *PublicParametersManager) PublicParametersCallCount() int {
	fake.publicParametersMutex.RLock()
	defer fake.publicParametersMutex.RUnlock()
	return len(fake.publicParametersArgsForCall)
}

func (fake *PublicParametersManager) PublicParametersCalls(stub func() driver.PublicParameters) {
	fake.publicParametersMutex.Lock()
	defer fake.publicParametersMutex.Unlock()
	fake.PublicParametersStub = stub
}

func (fake *PublicParametersManager) PublicParametersReturns(result1 driver.PublicParameters) {
	fake.publicParametersMutex.Lock()
	defer fake.publicParametersMutex.Unlock()
	fake.PublicParametersStub = nil
	fake.publicParametersReturns = struct {
		result1 driver.PublicParameters
	}{result1}
}

func (fake *PublicParametersManager) PublicParametersReturnsOnCall(i int, result1 driver.PublicParameters) {
	fake.publicParametersMutex.Lock()
	defer fake.publicParametersMutex.Unlock()
	fake.PublicParametersStub = nil
	if fake.publicParametersReturnsOnCall == nil {
		fake.publicParametersReturnsOnCall = make(map[int]struct {
			result1 driver.PublicParameters
		})
	}
	fake.publicParametersReturnsOnCall[i] = struct {
		result1 driver.PublicParameters
	}{result1}
}

func (fake *PublicParametersManager) PublicParams() *setup.PublicParams {
	fake.publicParamsMutex.Lock()
	ret, specificReturn := fake.publicParamsReturnsOnCall[len(fake.publicParamsArgsForCall)]
	fake.publicParamsArgsForCall = append(fake.publicParamsArgsForCall, struct {
	}{})
	stub := fake.PublicParamsStub
	fakeReturns := fake.publicParamsReturns
	fake.recordInvocation("PublicParams", []interface{}{})
	fake.publicParamsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *PublicParametersManager) PublicParamsCallCount() int {
	fake.publicParamsMutex.RLock()
	defer fake.publicParamsMutex.RUnlock()
	return len(fake.publicParamsArgsForCall)
}

func (fake *PublicParametersManager) PublicParamsCalls(stub func() *setup.PublicParams) {
	fake.publicParamsMutex.Lock()
	defer fake.publicParamsMutex.Unlock()
	fake.PublicParamsStub = stub
}

func (fake *PublicParametersManager) PublicParamsReturns(result1 *setup.PublicParams) {
	fake.publicParamsMutex.Lock()
	defer fake.publicParamsMutex.Unlock()
	fake.PublicParamsStub = nil
	fake.publicParamsReturns = struct {
		result1 *setup.PublicParams
	}{result1}
}

func (fake *PublicParametersManager) PublicParamsReturnsOnCall(i int, result1 *setup.PublicParams) {
	fake.publicParamsMutex.Lock()
	defer fake.publicParamsMutex.Unlock()
	fake.PublicParamsStub = nil
	if fake.publicParamsReturnsOnCall == nil {
		fake.publicParamsReturnsOnCall = make(map[int]struct {
			result1 *setup.PublicParams
		})
	}
	fake.publicParamsReturnsOnCall[i] = struct {
		result1 *setup.PublicParams
	}{result1}
}

func (fake *PublicParametersManager) PublicParamsHash() driver.PPHash {
	fake.publicParamsHashMutex.Lock()
	ret, specificReturn := fake.publicParamsHashReturnsOnCall[len(fake.publicParamsHashArgsForCall)]
	fake.publicParamsHashArgsForCall = append(fake.publicParamsHashArgsForCall, struct {
	}{})
	stub := fake.PublicParamsHashStub
	fakeReturns := fake.publicParamsHashReturns
	fake.recordInvocation("PublicParamsHash", []interface{}{})
	fake.publicParamsHashMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *PublicParametersManager) PublicParamsHashCallCount() int {
	fake.publicParamsHashMutex.RLock()
	defer fake.publicParamsHashMutex.RUnlock()
	return len(fake.publicParamsHashArgsForCall)
}

func (fake *PublicParametersManager) PublicParamsHashCalls(stub func() driver.PPHash) {
	fake.publicParamsHashMutex.Lock()
	defer fake.publicParamsHashMutex.Unlock()
	fake.PublicParamsHashStub = stub
}

func (fake *PublicParametersManager) PublicParamsHashReturns(result1 driver.PPHash) {
	fake.publicParamsHashMutex.Lock()
	defer fake.publicParamsHashMutex.Unlock()
	fake.PublicParamsHashStub = nil
	fake.publicParamsHashReturns = struct {
		result1 driver.PPHash
	}{result1}
}

func (fake *PublicParametersManager) PublicParamsHashReturnsOnCall(i int, result1 driver.PPHash) {
	fake.publicParamsHashMutex.Lock()
	defer fake.publicParamsHashMutex.Unlock()
	fake.PublicParamsHashStub = nil
	if fake.publicParamsHashReturnsOnCall == nil {
		fake.publicParamsHashReturnsOnCall = make(map[int]struct {
			result1 driver.PPHash
		})
	}
	fake.publicParamsHashReturnsOnCall[i] = struct {
		result1 driver.PPHash
	}{result1}
}

func (fake *PublicParametersManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.newCertifierKeyPairMutex.RLock()
	defer fake.newCertifierKeyPairMutex.RUnlock()
	fake.publicParametersMutex.RLock()
	defer fake.publicParametersMutex.RUnlock()
	fake.publicParamsMutex.RLock()
	defer fake.publicParamsMutex.RUnlock()
	fake.publicParamsHashMutex.RLock()
	defer fake.publicParamsHashMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *PublicParametersManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v1.PublicParametersManager = new(PublicParametersManager)
