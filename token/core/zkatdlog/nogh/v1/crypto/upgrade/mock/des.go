// Code generated by counterfeiter. DO NOT EDIT.
package mock

import (
	"sync"

	"github.com/hyperledger-labs/fabric-smart-client/platform/common/services/identity"
	"github.com/hyperledger-labs/fabric-token-sdk/token/core/zkatdlog/nogh/v1/crypto/upgrade"
	"github.com/hyperledger-labs/fabric-token-sdk/token/driver"
)

type Deserializer struct {
	GetOwnerVerifierStub        func(identity.Identity) (driver.Verifier, error)
	getOwnerVerifierMutex       sync.RWMutex
	getOwnerVerifierArgsForCall []struct {
		arg1 identity.Identity
	}
	getOwnerVerifierReturns struct {
		result1 driver.Verifier
		result2 error
	}
	getOwnerVerifierReturnsOnCall map[int]struct {
		result1 driver.Verifier
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Deserializer) GetOwnerVerifier(arg1 identity.Identity) (driver.Verifier, error) {
	fake.getOwnerVerifierMutex.Lock()
	ret, specificReturn := fake.getOwnerVerifierReturnsOnCall[len(fake.getOwnerVerifierArgsForCall)]
	fake.getOwnerVerifierArgsForCall = append(fake.getOwnerVerifierArgsForCall, struct {
		arg1 identity.Identity
	}{arg1})
	stub := fake.GetOwnerVerifierStub
	fakeReturns := fake.getOwnerVerifierReturns
	fake.recordInvocation("GetOwnerVerifier", []interface{}{arg1})
	fake.getOwnerVerifierMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Deserializer) GetOwnerVerifierCallCount() int {
	fake.getOwnerVerifierMutex.RLock()
	defer fake.getOwnerVerifierMutex.RUnlock()
	return len(fake.getOwnerVerifierArgsForCall)
}

func (fake *Deserializer) GetOwnerVerifierCalls(stub func(identity.Identity) (driver.Verifier, error)) {
	fake.getOwnerVerifierMutex.Lock()
	defer fake.getOwnerVerifierMutex.Unlock()
	fake.GetOwnerVerifierStub = stub
}

func (fake *Deserializer) GetOwnerVerifierArgsForCall(i int) identity.Identity {
	fake.getOwnerVerifierMutex.RLock()
	defer fake.getOwnerVerifierMutex.RUnlock()
	argsForCall := fake.getOwnerVerifierArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Deserializer) GetOwnerVerifierReturns(result1 driver.Verifier, result2 error) {
	fake.getOwnerVerifierMutex.Lock()
	defer fake.getOwnerVerifierMutex.Unlock()
	fake.GetOwnerVerifierStub = nil
	fake.getOwnerVerifierReturns = struct {
		result1 driver.Verifier
		result2 error
	}{result1, result2}
}

func (fake *Deserializer) GetOwnerVerifierReturnsOnCall(i int, result1 driver.Verifier, result2 error) {
	fake.getOwnerVerifierMutex.Lock()
	defer fake.getOwnerVerifierMutex.Unlock()
	fake.GetOwnerVerifierStub = nil
	if fake.getOwnerVerifierReturnsOnCall == nil {
		fake.getOwnerVerifierReturnsOnCall = make(map[int]struct {
			result1 driver.Verifier
			result2 error
		})
	}
	fake.getOwnerVerifierReturnsOnCall[i] = struct {
		result1 driver.Verifier
		result2 error
	}{result1, result2}
}

func (fake *Deserializer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getOwnerVerifierMutex.RLock()
	defer fake.getOwnerVerifierMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Deserializer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ upgrade.Deserializer = new(Deserializer)
