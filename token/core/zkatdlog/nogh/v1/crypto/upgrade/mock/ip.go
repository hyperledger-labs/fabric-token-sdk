// Code generated by counterfeiter. DO NOT EDIT.
package mock

import (
	"context"
	"sync"

	"github.com/hyperledger-labs/fabric-token-sdk/token/core/zkatdlog/nogh/v1/crypto/upgrade"
	"github.com/hyperledger-labs/fabric-token-sdk/token/driver"
)

type IdentityProvider struct {
	GetSignerStub        func(context.Context, driver.Identity) (driver.Signer, error)
	getSignerMutex       sync.RWMutex
	getSignerArgsForCall []struct {
		arg1 context.Context
		arg2 driver.Identity
	}
	getSignerReturns struct {
		result1 driver.Signer
		result2 error
	}
	getSignerReturnsOnCall map[int]struct {
		result1 driver.Signer
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *IdentityProvider) GetSigner(arg1 context.Context, arg2 driver.Identity) (driver.Signer, error) {
	fake.getSignerMutex.Lock()
	ret, specificReturn := fake.getSignerReturnsOnCall[len(fake.getSignerArgsForCall)]
	fake.getSignerArgsForCall = append(fake.getSignerArgsForCall, struct {
		arg1 context.Context
		arg2 driver.Identity
	}{arg1, arg2})
	stub := fake.GetSignerStub
	fakeReturns := fake.getSignerReturns
	fake.recordInvocation("GetSigner", []interface{}{arg1, arg2})
	fake.getSignerMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *IdentityProvider) GetSignerCallCount() int {
	fake.getSignerMutex.RLock()
	defer fake.getSignerMutex.RUnlock()
	return len(fake.getSignerArgsForCall)
}

func (fake *IdentityProvider) GetSignerCalls(stub func(context.Context, driver.Identity) (driver.Signer, error)) {
	fake.getSignerMutex.Lock()
	defer fake.getSignerMutex.Unlock()
	fake.GetSignerStub = stub
}

func (fake *IdentityProvider) GetSignerArgsForCall(i int) (context.Context, driver.Identity) {
	fake.getSignerMutex.RLock()
	defer fake.getSignerMutex.RUnlock()
	argsForCall := fake.getSignerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *IdentityProvider) GetSignerReturns(result1 driver.Signer, result2 error) {
	fake.getSignerMutex.Lock()
	defer fake.getSignerMutex.Unlock()
	fake.GetSignerStub = nil
	fake.getSignerReturns = struct {
		result1 driver.Signer
		result2 error
	}{result1, result2}
}

func (fake *IdentityProvider) GetSignerReturnsOnCall(i int, result1 driver.Signer, result2 error) {
	fake.getSignerMutex.Lock()
	defer fake.getSignerMutex.Unlock()
	fake.GetSignerStub = nil
	if fake.getSignerReturnsOnCall == nil {
		fake.getSignerReturnsOnCall = make(map[int]struct {
			result1 driver.Signer
			result2 error
		})
	}
	fake.getSignerReturnsOnCall[i] = struct {
		result1 driver.Signer
		result2 error
	}{result1, result2}
}

func (fake *IdentityProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getSignerMutex.RLock()
	defer fake.getSignerMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *IdentityProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ upgrade.IdentityProvider = new(IdentityProvider)
