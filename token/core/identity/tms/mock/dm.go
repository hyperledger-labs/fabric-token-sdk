// Code generated by counterfeiter. DO NOT EDIT.
package mock

import (
	"sync"

	"github.com/hyperledger-labs/fabric-smart-client/platform/view/core/sig"
	"github.com/hyperledger-labs/fabric-token-sdk/token/core/identity/tms"
)

type DeserializerManager struct {
	AddDeserializerStub        func(sig.Deserializer)
	addDeserializerMutex       sync.RWMutex
	addDeserializerArgsForCall []struct {
		arg1 sig.Deserializer
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *DeserializerManager) AddDeserializer(arg1 sig.Deserializer) {
	fake.addDeserializerMutex.Lock()
	fake.addDeserializerArgsForCall = append(fake.addDeserializerArgsForCall, struct {
		arg1 sig.Deserializer
	}{arg1})
	stub := fake.AddDeserializerStub
	fake.recordInvocation("AddDeserializer", []interface{}{arg1})
	fake.addDeserializerMutex.Unlock()
	if stub != nil {
		fake.AddDeserializerStub(arg1)
	}
}

func (fake *DeserializerManager) AddDeserializerCallCount() int {
	fake.addDeserializerMutex.RLock()
	defer fake.addDeserializerMutex.RUnlock()
	return len(fake.addDeserializerArgsForCall)
}

func (fake *DeserializerManager) AddDeserializerCalls(stub func(sig.Deserializer)) {
	fake.addDeserializerMutex.Lock()
	defer fake.addDeserializerMutex.Unlock()
	fake.AddDeserializerStub = stub
}

func (fake *DeserializerManager) AddDeserializerArgsForCall(i int) sig.Deserializer {
	fake.addDeserializerMutex.RLock()
	defer fake.addDeserializerMutex.RUnlock()
	argsForCall := fake.addDeserializerArgsForCall[i]
	return argsForCall.arg1
}

func (fake *DeserializerManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addDeserializerMutex.RLock()
	defer fake.addDeserializerMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *DeserializerManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ tms.DeserializerManager = new(DeserializerManager)
