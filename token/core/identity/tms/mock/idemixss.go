// Code generated by counterfeiter. DO NOT EDIT.
package mock

import (
	"sync"

	"github.com/hyperledger-labs/fabric-smart-client/platform/view/driver"
	"github.com/hyperledger-labs/fabric-smart-client/platform/view/view"
)

type IdemixSignerService struct {
	RegisterSignerStub        func(view.Identity, driver.Signer, driver.Verifier) error
	registerSignerMutex       sync.RWMutex
	registerSignerArgsForCall []struct {
		arg1 view.Identity
		arg2 driver.Signer
		arg3 driver.Verifier
	}
	registerSignerReturns struct {
		result1 error
	}
	registerSignerReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *IdemixSignerService) RegisterSigner(arg1 view.Identity, arg2 driver.Signer, arg3 driver.Verifier) error {
	fake.registerSignerMutex.Lock()
	ret, specificReturn := fake.registerSignerReturnsOnCall[len(fake.registerSignerArgsForCall)]
	fake.registerSignerArgsForCall = append(fake.registerSignerArgsForCall, struct {
		arg1 view.Identity
		arg2 driver.Signer
		arg3 driver.Verifier
	}{arg1, arg2, arg3})
	stub := fake.RegisterSignerStub
	fakeReturns := fake.registerSignerReturns
	fake.recordInvocation("RegisterSigner", []interface{}{arg1, arg2, arg3})
	fake.registerSignerMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *IdemixSignerService) RegisterSignerCallCount() int {
	fake.registerSignerMutex.RLock()
	defer fake.registerSignerMutex.RUnlock()
	return len(fake.registerSignerArgsForCall)
}

func (fake *IdemixSignerService) RegisterSignerCalls(stub func(view.Identity, driver.Signer, driver.Verifier) error) {
	fake.registerSignerMutex.Lock()
	defer fake.registerSignerMutex.Unlock()
	fake.RegisterSignerStub = stub
}

func (fake *IdemixSignerService) RegisterSignerArgsForCall(i int) (view.Identity, driver.Signer, driver.Verifier) {
	fake.registerSignerMutex.RLock()
	defer fake.registerSignerMutex.RUnlock()
	argsForCall := fake.registerSignerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *IdemixSignerService) RegisterSignerReturns(result1 error) {
	fake.registerSignerMutex.Lock()
	defer fake.registerSignerMutex.Unlock()
	fake.RegisterSignerStub = nil
	fake.registerSignerReturns = struct {
		result1 error
	}{result1}
}

func (fake *IdemixSignerService) RegisterSignerReturnsOnCall(i int, result1 error) {
	fake.registerSignerMutex.Lock()
	defer fake.registerSignerMutex.Unlock()
	fake.RegisterSignerStub = nil
	if fake.registerSignerReturnsOnCall == nil {
		fake.registerSignerReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.registerSignerReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *IdemixSignerService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.registerSignerMutex.RLock()
	defer fake.registerSignerMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *IdemixSignerService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
